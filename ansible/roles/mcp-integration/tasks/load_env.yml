---
# Load and parse .env file if provided

- name: Initialize loaded environment variables
  set_fact:
    loaded_env_vars: {}

- name: Check if ENV_FILE is provided and exists
  block:
    - name: Display .env file path
      debug:
        msg: "Loading environment variables from: {{ env_file }}"

    - name: Check if .env file exists
      stat:
        path: "{{ env_file }}"
      register: env_file_stat

    - name: Fail if .env file doesn't exist
      fail:
        msg: "Environment file not found: {{ env_file }}"
      when: not env_file_stat.stat.exists

    - name: Read .env file contents
      slurp:
        src: "{{ env_file }}"
      register: env_file_content

    - name: Parse .env file with shell script
      shell: |
        # Parse .env file and output as key=value pairs
        while IFS= read -r line || [[ -n "$line" ]]; do
          # Skip empty lines and comments
          [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
          # Process lines with = sign
          if [[ "$line" =~ ^[[:space:]]*([^=]+)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]// /}"
            value="${BASH_REMATCH[2]}"
            # Remove quotes if present
            if [[ "$value" =~ ^\"(.*)\"$ ]] || [[ "$value" =~ ^\'(.*)\'$ ]]; then
              value="${BASH_REMATCH[1]}"
            fi
            echo "${key}=${value}"
          fi
        done < "{{ env_file }}"
      register: parsed_env_output
      changed_when: false

    - name: Convert parsed output to dictionary
      set_fact:
        loaded_env_vars: "{{ loaded_env_vars | combine({item.split('=')[0]: item.split('=', 1)[1]}) }}"
      loop: "{{ parsed_env_output.stdout_lines }}"
      when: parsed_env_output.stdout_lines is defined and item | length > 0

    - name: Display loaded environment variables
      debug:
        msg: "Loaded {{ loaded_env_vars | length }} environment variables from {{ env_file }}"

    - name: Debug environment variables (keys only for security)
      debug:
        msg: "Environment variable keys: {{ loaded_env_vars.keys() | list }}"
      when: loaded_env_vars | length > 0

  when: env_file is defined and env_file | length > 0
  rescue:
    - name: Handle .env file loading error
      debug:
        msg: "Warning: Failed to load .env file {{ env_file }}. Continuing without environment variables."
      
    - name: Reset environment variables on error
      set_fact:
        loaded_env_vars: {}

- name: Log .env processing completion
  debug:
    msg: "Environment file processing completed. {{ loaded_env_vars | length }} variables available."