---
# Process a single MCP server configuration with environment variable resolution

- name: Set current MCP server details
  set_fact:
    mcp_name: "{{ mcp_server.key }}"
    mcp_config: "{{ mcp_server.value }}"

- name: Validate MCP server name
  fail:
    msg: "MCP server name cannot be empty"
  when: mcp_name | length == 0

- name: Initialize processed MCP config
  set_fact:
    processed_mcp_config:
      command: "{{ mcp_config.command }}"

- name: Process command arguments with environment variable resolution
  block:
    - name: Resolve environment variables in command arguments
      set_fact:
        processed_args: []
        
    - name: Process each argument for environment variable resolution
      set_fact:
        processed_args: "{{ processed_args + [resolved_arg] }}"
      vars:
        var_name_match: "{{ item | regex_search('\\$\\{([^}]+)\\}', '\\1') }}"
        var_name: "{{ var_name_match[0] if var_name_match else '' }}"
        resolved_arg: "{{ item | regex_replace('\\$\\{' + var_name + '\\}', loaded_env_vars[var_name]) if (var_name_match and var_name in loaded_env_vars) else (item | regex_replace('\\$\\{' + var_name + '\\}', lookup('env', var_name)) if (var_name_match and lookup('env', var_name)) else item) }}"
      loop: "{{ mcp_config.args | default([]) }}"

    - name: Debug variable resolution
      debug:
        var: loaded_env_vars
      when: loaded_env_vars | length > 0

    - name: Add processed arguments to config
      set_fact:
        processed_mcp_config: "{{ processed_mcp_config | combine({'args': processed_args}) }}"
  when: mcp_config.args is defined and mcp_config.args | length > 0

- name: Process environment variables if defined
  block:
    - name: Initialize processed environment
      set_fact:
        processed_env: {}

    - name: Resolve environment variables in env section
      set_fact:
        processed_env: "{{ processed_env | combine({item.key: resolved_value}) }}"
      vars:
        var_name_match: "{{ item.value | regex_search('\\$\\{([^}]+)\\}', '\\1') }}"
        var_name: "{{ var_name_match[0] if var_name_match else '' }}"
        resolved_value: "{{ item.value | regex_replace('\\$\\{' + var_name + '\\}', loaded_env_vars[var_name]) if (var_name_match and var_name in loaded_env_vars) else (item.value | regex_replace('\\$\\{' + var_name + '\\}', lookup('env', var_name)) if (var_name_match and lookup('env', var_name)) else item.value) }}"
      loop: "{{ mcp_config.env | dict2items }}"

    - name: Add processed environment to config
      set_fact:
        processed_mcp_config: "{{ processed_mcp_config | combine({'env': processed_env}) }}"
  when: mcp_config.env is defined

- name: Validate processed configuration
  fail:
    msg: "MCP server '{{ mcp_name }}' has empty command after processing"
  when: processed_mcp_config.command | length == 0

- name: Add processed MCP server to collection
  set_fact:
    processed_mcp_servers: "{{ processed_mcp_servers | combine({mcp_name: processed_mcp_config}) }}"

- name: Log successful processing
  debug:
    msg: "Successfully processed MCP server: {{ mcp_name }}"

- name: Debug processed arguments (for testing)
  debug:
    msg: "Processed arguments: {{ processed_mcp_config.args | default([]) }}"
  when: processed_mcp_config.args is defined

- name: Debug processed environment variables (for testing)
  debug:
    msg: "Processed env vars: {{ processed_mcp_config.env | default({}) }}"
  when: processed_mcp_config.env is defined