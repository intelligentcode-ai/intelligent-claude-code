---
# Main tasks for intelligent-claude-code uninstallation

- name: Validate uninstall parameters
  assert:
    that:
      - claude_install_path is defined
      - claude_scope in ['user', 'project']
    fail_msg: "Invalid uninstall parameters"

- name: Check if installation exists
  stat:
    path: "{{ claude_install_path }}"
  register: install_directory

- name: Display uninstall mode
  debug:
    msg: "Uninstall mode: {{ 'Force removal (all files)' if (force_remove is defined and force_remove | bool) else 'Conservative (preserve user data)' }}"

- name: Handle project-specific removal
  include_tasks: project_removal.yml
  when: claude_scope == "project"

- name: Handle graceful removal from user CLAUDE.md
  include_tasks: graceful_removal.yml
  when: install_directory.stat.exists

- name: Remove system files (modes directory)
  file:
    path: "{{ claude_install_path }}/modes"
    state: absent
  ignore_errors: yes
  register: modes_removal
  when: install_directory.stat.exists

- name: Display modes removal result
  debug:
    msg: "{{ 'Modes directory removed' if not modes_removal.failed else 'Could not remove modes directory: ' + (modes_removal.msg | default('Permission denied')) }}"
  when: install_directory.stat.exists

- name: Remove system files (behaviors directory)
  file:
    path: "{{ claude_install_path }}/behaviors"
    state: absent
  ignore_errors: yes
  register: behaviors_removal
  when: install_directory.stat.exists

- name: Display behaviors removal result
  debug:
    msg: "{{ 'Behaviors directory removed' if not behaviors_removal.failed else 'Could not remove behaviors directory: ' + (behaviors_removal.msg | default('Permission denied')) }}"
  when: install_directory.stat.exists

- name: Remove system files (commands directory)
  file:
    path: "{{ claude_install_path }}/commands"
    state: absent
  ignore_errors: yes
  register: commands_removal
  when: install_directory.stat.exists

- name: Display commands removal result
  debug:
    msg: "{{ 'Commands directory removed' if not commands_removal.failed else 'Could not remove commands directory: ' + (commands_removal.msg | default('Permission denied')) }}"
  when: install_directory.stat.exists

- name: Remove system files (roles directory)
  file:
    path: "{{ claude_install_path }}/roles"
    state: absent
  ignore_errors: yes
  register: roles_removal
  when: install_directory.stat.exists

- name: Display roles removal result
  debug:
    msg: "{{ 'Roles directory removed' if not roles_removal.failed else 'Could not remove roles directory: ' + (roles_removal.msg | default('Permission denied')) }}"
  when: install_directory.stat.exists

- name: Remove system files (agents directory)
  file:
    path: "{{ claude_install_path }}/agents"
    state: absent
  ignore_errors: yes
  register: agents_removal
  when: install_directory.stat.exists

- name: Display agents removal result
  debug:
    msg: "{{ 'Agents directory removed' if not agents_removal.failed else 'Could not remove agents directory: ' + (agents_removal.msg | default('Permission denied')) }}"
  when: install_directory.stat.exists

- name: Remove system files (prb-templates directory)
  file:
    path: "{{ claude_install_path }}/prb-templates"
    state: absent
  ignore_errors: yes
  register: prb_templates_removal
  when: install_directory.stat.exists

- name: Display prb-templates removal result
  debug:
    msg: "{{ 'PRB templates directory removed' if not prb_templates_removal.failed else 'Could not remove prb-templates directory: ' + (prb_templates_removal.msg | default('Permission denied')) }}"
  when: install_directory.stat.exists

- name: Remove system files (VERSION file)
  file:
    path: "{{ claude_install_path }}/VERSION"
    state: absent
  ignore_errors: yes
  register: version_removal
  when: install_directory.stat.exists

- name: Display VERSION removal result
  debug:
    msg: "{{ 'VERSION file removed' if not version_removal.failed else 'Could not remove VERSION file: ' + (version_removal.msg | default('Permission denied')) }}"
  when: install_directory.stat.exists

- name: Remove user data files (force mode only)
  file:
    path: "{{ item }}"
    state: absent
  ignore_errors: yes
  loop:
    - "{{ claude_install_path }}/config.md"
    - "{{ claude_install_path }}/scores.md"
    - "{{ claude_install_path }}/learning-callouts.md"
  register: user_data_removal
  when: 
    - install_directory.stat.exists
    - force_remove is defined and force_remove | bool

- name: Display user data removal result
  debug:
    msg: "User data files removed (force mode)"
  when: 
    - install_directory.stat.exists
    - force_remove is defined and force_remove | bool

- name: Display user data preservation notice
  debug:
    msg: "User data preserved: config.md, scores.md, learning-callouts.md (use FORCE=true to remove)"
  when: 
    - install_directory.stat.exists
    - not (force_remove is defined and force_remove | bool)

- name: Check if .claude directory is empty
  find:
    paths: "{{ claude_install_path }}"
    file_type: any
  register: claude_dir_contents
  when: install_directory.stat.exists

- name: Remove empty .claude directory
  file:
    path: "{{ claude_install_path }}"
    state: absent
  ignore_errors: yes
  register: claude_dir_removal
  when: 
    - install_directory.stat.exists
    - claude_dir_contents.matched == 0

- name: Display directory removal result
  debug:
    msg: "{{ '.claude directory removed (was empty)' if (claude_dir_contents.matched == 0 and not claude_dir_removal.failed) else '.claude directory preserved (contains user files)' }}"
  when: install_directory.stat.exists

- name: Force remove .claude directory (force mode only)
  file:
    path: "{{ claude_install_path }}"
    state: absent
  ignore_errors: yes
  register: claude_dir_force_removal
  when: 
    - install_directory.stat.exists
    - force_remove is defined and force_remove | bool
    - claude_dir_contents.matched > 0

- name: Display force removal result
  debug:
    msg: "{{ '.claude directory force removed' if not claude_dir_force_removal.failed else 'Could not force remove .claude directory: ' + (claude_dir_force_removal.msg | default('Permission denied')) }}"
  when: 
    - install_directory.stat.exists
    - force_remove is defined and force_remove | bool
    - claude_dir_contents.matched > 0

- name: Display uninstall summary
  debug:
    msg:
      - "Uninstall complete!"
      - "Location: {{ claude_install_path }}"
      - "Mode: {{ 'Force removal - all files removed' if (force_remove is defined and force_remove | bool) else 'Conservative - user data preserved' }}"
      - "Removed: Virtual team modes, behaviors, commands, roles, agents, prb-templates, VERSION file"
      - "{{ 'Preserved: config.md, scores.md, learning-callouts.md' if not (force_remove is defined and force_remove | bool) else 'All files removed' }}"
      - "{{ 'Directory preserved (contains user files)' if (claude_dir_contents.matched > 0 and not (force_remove is defined and force_remove | bool)) else 'Directory removed' }}"
  when: install_directory.stat.exists

- name: Display no installation found message
  debug:
    msg: "No installation found at {{ claude_install_path }}"
  when: not install_directory.stat.exists