# Task Assignment Template
# This file defines the complete specification for a task

task:
  id: "TASK-XXX"  # Unique identifier
  title: "Task Title"
  type: "feature|bug|enhancement"
  epic: "EPIC-XXX"  # Parent epic reference
  created: "YYYY-MM-DD HH:MM:SS"
  phase: "INIT"  # INIT|PLAN|EXECUTE|ACCEPTANCE|DONE
  
problem_description: |
  # Clear description of the problem or feature request
  # Include context, current state, desired state
  
acceptance_criteria:
  - id: "AC-001"
    description: "Specific measurable criteria"
    validation_method: "automated_test|manual_review|security_scan"
    status: "pending|passed|failed"
    
  - id: "AC-002"
    description: "Another criteria"
    validation_method: "peer_review"
    status: "pending"
    
definition_of_done:
  - "All acceptance criteria passed"
  - "Code peer reviewed by domain expert"
  - "Tests written and passing"
  - "Documentation updated"
  - "Security scan completed"
  - "Git operations completed"
  
assignment:
  primary_role: "@Role-Name"
  capability_match: "XX%"  # Calculated match percentage
  thinking_requirements:
    - "ultra-experienced: true"
    - "sequential_thinking: mandatory"
    - "memory_consultation: required"
  supporting_roles:
    - "@Review-Role"
    - "@Test-Role"
    
git_operations:
  branch:
    create_from: "feature/base-branch"
    name: "feature/TASK-XXX-description"
  commit:
    message_template: "type: Brief description\n\nDetailed explanation"
    requirements:
      - "Signed commits"
      - "Conventional commit format"
  completion:
    merge_to: "feature/base-branch"
    cleanup: "delete_branch"
    
subtasks:
  - id: "ST-001"
    title: "Analyze existing implementation"
    assigned_to: "@AI-Engineer"
    status: "pending"
    outcome_options:
      - "continue_to: ST-002"
      - "blocked_by: [dependency]"
      
  - id: "ST-002"
    title: "Implement changes"
    assigned_to: "@AI-Engineer"
    status: "pending"
    outcome_options:
      - "continue_to: ST-003"
      - "back_to: ST-001"
      
  - id: "ST-003"
    title: "Peer review"
    assigned_to: "@AI-Architect"
    status: "pending"
    outcome_options:
      - "continue_to: ST-004"
      - "back_to: ST-002"
      
team_operations:
  - "Research existing patterns first"
  - "Consult memory for similar implementations"
  - "Document all decisions"
  - "Capture learnings for future use"
  
integration_hooks:
  jira:
    enabled: false
    ticket_id: "PROJ-XXX"
  github:
    enabled: false
    pr_number: null
  ci_cd:
    enabled: false
    pipeline_id: null
    
# Config settings embedded during PLAN phase - ALL settings from config.md
embedded_config:
  # Core settings
  autonomy_level: "L3"  # From team_maturity_level
  pm_always_active: true  # From pm_always_active
  memory_integration: true  # From memory_integration
  blocking_enabled: false  # From blocking_enabled - CRITICAL for workflow
  
  # Git settings - ALL from config.md
  git_privacy: true  # From git_privacy
  branch_protection: true  # From branch_protection
  default_branch: "main"  # From default_branch
  require_pr_for_main: true  # From require_pr_for_main
  branch_prefixes: ["feature/", "bugfix/", "hotfix/", "release/"]
  
  # Process settings
  requirements_engineer_mandatory: true  # From requirements_engineer_mandatory
  architecture_review_required: true  # From architecture_review_required
  enforce_peer_review: true  # From enforce_peer_review
  code_review_required: true  # From code_review_required
  
  # Quality settings
  testing_required: true  # From testing_required
  documentation_required: true  # From documentation_required
  auto_documentation: true  # From auto_documentation
  enforce_quality_gates: true  # From enforce_quality_gates
  
  # Security settings
  security_validation: true  # From security_validation
  compliance_checking: true  # From compliance_checking
  vulnerability_scanning: true  # From vulnerability_scanning
  
  # Tool settings
  context7_enabled: true  # From context7_enabled
  sequential_thinking: true  # From sequential_thinking
  mcp_tools_enabled: true  # From mcp_tools_enabled
  
  # Violation handling
  violation_logging: true  # From violation_logging
  auto_correction: true  # From auto_correction
  
  # Planning metadata
  config_loaded_at: "YYYY-MM-DD HH:MM:SS"  # When config was read
  config_source: "path/to/config.md"  # Where config came from
  
# Workflow enforcement structure - drives execution behavior
workflow:
  # Review findings handling based on blocking_enabled
  review_findings:
    if_blocking_false:
      action: "CREATE_FOLLOWUP_TASK"
      template: "TASK-XXX-fix-[finding]"
      priority_mapping:
        critical: "P0"
        enhancement: "P2"
        minor: "P3"
    if_blocking_true:
      action: "BLOCK_AND_RETURN"
      message: "Review findings must be addressed before continuing"
      
  # Git operations based on git_privacy
  git_operations:
    if_privacy_true:
      forbidden_terms: ["Claude", "AI", "anthropic", "ðŸ¤–", "artificial intelligence"]
      sanitization_command: "sed -E 's/(Claude|AI|anthropic|ðŸ¤–|artificial intelligence)//gi'"
      commit_template: "[type]: [description] (sanitized)"
    if_privacy_false:
      forbidden_terms: []
      commit_template: "[type]: [description]"
    validation:
      scan_credentials: true  # From scan_credentials
      validate_paths: true  # From validate_file_paths
      validate_commits: true  # From validate_commits
      
  # Execution rules - no config.md needed during execution
  execution_rules:
    - "Read embedded_config section, NOT config.md"
    - "Follow workflow instructions explicitly"
    - "Use workflow.review_findings based on blocking_enabled value"
    - "Use workflow.git_operations based on git_privacy value"
    - "All timestamps via: date '+%Y-%m-%d %H:%M:%S'"
    
  # Timestamp generation
  timestamps:
    command: "date '+%Y-%m-%d %H:%M:%S'"
    usage: "timestamp=$(date '+%Y-%m-%d %H:%M:%S')"