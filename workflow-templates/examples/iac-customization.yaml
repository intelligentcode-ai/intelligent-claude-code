# Infrastructure as Code Workflow Customization
# Example showing how to customize workflows for IaC requirements

metadata:
  name: "IaC Enhanced Workflow"
  description: "Adds Infrastructure as Code specific steps to standard workflows"
  extends: "../outer-workflow.yaml"
  
customizations:
  # Add IaC requirements after standard requirements
  post_requirements:
    inject:
      - id: "iac_requirements"
        action: "Define infrastructure requirements"
        steps:
          - "Identify infrastructure components"
          - "Define environment configurations"
          - "Specify scaling requirements"
          - "Document disaster recovery needs"
        outputs:
          - "infrastructure_components"
          - "environment_matrix"
          - "scaling_policies"
          
  # Add IaC-specific architecture considerations
  architecture_design:
    extend:
      - id: "iac_architecture"
        action: "Design infrastructure architecture"
        after: "technology_selection"
        steps:
          - "Design network topology"
          - "Plan security groups and IAM"
          - "Define resource tagging strategy"
          - "Plan monitoring and alerting"
        considerations:
          - "Multi-region deployment"
          - "High availability"
          - "Cost optimization"
          - "Compliance requirements"
          
  # Add IaC-specific task types
  task_breakdown:
    extend:
      - id: "iac_tasks"
        action: "Create infrastructure tasks"
        after: "decompose_work"
        task_types:
          - "terraform_modules"
          - "cloudformation_templates"
          - "ansible_playbooks"
          - "configuration_management"
          
# Execution workflow customizations
execution_customizations:
  extends: "../inner-workflow.yaml"
  
  pre_execution:
    inject:
      - id: "iac_setup"
        action: "Setup IaC environment"
        steps:
          - "Initialize terraform/ansible"
          - "Configure cloud credentials"
          - "Validate state backend"
          - "Check existing infrastructure"
          
  validation:
    extend:
      - id: "iac_validation"
        action: "Validate infrastructure code"
        after: "quality_checks"
        validations:
          - "Terraform plan review"
          - "Security policy compliance"
          - "Cost estimation"
          - "Drift detection"
          
  post_implementation:
    inject:
      - id: "iac_testing"
        action: "Test infrastructure changes"
        steps:
          - "Deploy to test environment"
          - "Run infrastructure tests"
          - "Validate connectivity"
          - "Test disaster recovery"
          
# Conditional steps based on IaC type
conditional_steps:
  - condition: "iac_tool == 'terraform'"
    steps:
      - id: "terraform_specific"
        action: "Terraform-specific validations"
        validations:
          - "Module versioning"
          - "State locking"
          - "Provider constraints"
          
  - condition: "iac_tool == 'ansible'"
    steps:
      - id: "ansible_specific"
        action: "Ansible-specific validations"
        validations:
          - "Playbook syntax"
          - "Role dependencies"
          - "Vault encryption"
          
# IaC-specific git operations
git_operations:
  branch_prefix: "infrastructure/"
  commit_template: "infra: {{summary}}"
  additional_validations:
    - "No secrets in code"
    - "Environment variables documented"
    - "README updated with deployment steps"
    
# Knowledge generation specific to IaC
knowledge_generation:
  additional_captures:
    - "Infrastructure patterns"
    - "Cost optimization techniques"
    - "Security configurations"
    - "Deployment procedures"
  entities:
    - type: "InfrastructurePattern"
      attributes:
        - "cloud_provider"
        - "resource_types"
        - "cost_profile"
        - "security_measures"