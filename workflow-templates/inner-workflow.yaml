# Inner Workflow Template - Task Execution Process
# Defines how individual tasks are executed by specialists
#
# VALIDATION ENFORCEMENT:
# - Task execution BLOCKED without proper specialist assignment
# - Peer reviews REQUIRE domain expert SMEs only
# - AI work reviews MUST be done by @AI-Engineer/@AI-Architect
# - Capability match >70% MANDATORY for all roles
# - Validation gates HALT execution if requirements not met

metadata:
  name: "Task Execution Workflow"
  version: "2.0.0"
  min_compatible: "2.0.0"
  description: |
    Workflow for executing individual tasks within stories/bugs.
    Specialists execute tasks and can optionally create subtasks.
    
workflow:
  validation_gates:
    pre_execution:
      description: "MANDATORY validation before ANY task execution"
      blocking: true
      requirements:
        - "Task assignment validated via icc:validate-assignments()"
        - "Specialist role verified (>70% capability match)"
        - "No generic roles for specialist work"
        - "Architect approval obtained for AI/infrastructure work"
      failure: "HALT - Cannot proceed without validation"
      
  phases:
    - id: "knowledge_retrieval"
      name: "Knowledge Retrieval"
      description: "Retrieve relevant knowledge for this task"
      steps:
        - id: "search_task_patterns"
          action: "Search for similar task implementations"
          queries:
            - "Past solutions for this task type"
            - "Code patterns that worked"
            - "Known issues and fixes"
          outputs:
            - "relevant_patterns"
            - "proven_approaches"
            - "pitfalls_to_avoid"
            
        - id: "load_story_context"
          action: "Understand parent story/bug requirements"
          inputs:
            - "story_objectives"
            - "task_assignment"
            - "dependencies"
            
    - id: "task_planning"
      name: "Task Planning"
      description: "Specialist plans task execution"
      steps:
        - id: "assess_complexity"
          action: "Determine if subtasks needed"
          decision:
            - "Simple task: Direct execution"
            - "Complex task: Create subtasks"
            
        - id: "create_subtasks"
          action: "Optional: Break into atomic steps"
          condition: "complexity == high"
          subtask_examples:
            - "Setup environment"
            - "Implement core logic"
            - "Add error handling"
            - "Write tests"
            - "Update documentation"
            
      hooks:
        pre_execution:
          description: "Before task execution starts"
          allows: ["inject", "extend"]
          
    - id: "task_execution"
      name: "Task Execution"
      description: "Execute the task or subtasks"
      steps:
        - id: "execute_work"
          action: "Perform assigned work"
          approach:
            - "Follow retrieved patterns"
            - "Apply specialist expertise"
            - "Consider edge cases"
            - "Maintain quality standards"
            
        - id: "track_progress"
          action: "Update task/subtask status"
          statuses:
            - "in_progress"
            - "blocked"
            - "completed"
            - "needs_review"
          priority_display:
            - "Show priority prefix: [P0], [P1], [P2], [P3]"
            - "Highlight P0 items, dim P3 items"
            - "Sort status updates by priority"
            
        - id: "handle_blockers"
          action: "Escalate if blocked"
          escalation:
            - "Technical blocker: Consult architect"
            - "Requirement unclear: Consult PM/RE"
            - "Dependency missing: Coordinate with team"
          priority_escalation:
            - "Blocking dependencies escalate to critical_path priority"
            - "System failures escalate to P0"
            - "Customer escalations increase priority by 1 level"
            
    - id: "task_validation"
      name: "Task Validation"
      description: "Validate task completion"
      steps:
        - id: "self_validation"
          action: "Specialist validates own work"
          checks:
            - "Task objectives met"
            - "Quality standards followed"
            - "No regressions introduced"
            
        - id: "automated_checks"
          action: "Run automated validations"
          types:
            - "tests"
            - "linting"
            - "security_scans"
            
      hooks:
        post_execution:
          description: "After task execution"
          allows: ["inject", "extend", "validate"]
          
    - id: "peer_review"
      name: "Peer Review"
      description: "Domain expert review if required"
      condition: "task_type requires review"
      steps:
        - id: "assign_reviewer"
          action: "Find appropriate reviewer"
          validation_required: true
          validation_chain:
            - step: "detect_review_type"
              command: "icc:detect-work-type(task_content)"
              description: "Analyze work type to determine review expertise needed"
              blocking: true
              
            - step: "validate_reviewer"
              command: "icc:validate-assignments(review_task, proposed_reviewer)"
              description: "Verify reviewer has appropriate domain expertise"
              blocking: true
              enforced_rules:
                - "AI work â†’ @AI-Engineer or @AI-Architect review"
                - "Security work â†’ @Security-Engineer review"
                - "Infrastructure â†’ @DevOps-Engineer or @System-Engineer review"
                - "Generic reviewers â†’ BLOCKED for specialist work"
                
          criteria:
            - "Domain expertise MANDATORY"
            - "Not task implementer"
            - "Capability match >70%"
            - "Available capacity"
            
        - id: "conduct_review"
          action: "Review implementation"
          focus:
            - "Correctness"
            - "Quality"
            - "Standards compliance"
            
        - id: "handle_feedback"
          action: "Process review findings"
          conditional:
            - condition: "embedded_config.blocking_enabled == false"
              action: "Create follow-up tasks"
            - condition: "embedded_config.blocking_enabled == true"
              action: "Block until resolved"
              
    - id: "git_operations"
      name: "Git Operations"
      description: "Commit and push task changes"
      steps:
        - id: "commit_changes"
          action: "Commit task implementation"
          template: "{{task_id}}: {{summary}}"
          includes:
            - "task_deliverables"
            - "implementation_files"
            - "test_files"
            - "documentation_updates"
          conditional:
            - condition: "embedded_config.git_privacy == true"
              sanitize: ["AI", "Claude", "anthropic", "ðŸ¤–"]
              
        - id: "push_changes"
          action: "Push task commits to remote"
          validates:
            - "All tests passing"
            - "No merge conflicts"
            - "Task deliverables complete"
            
    - id: "task_completion"
      name: "Task Completion"
      description: "Finalize task"
      steps:
        - id: "verify_subtasks"
          action: "Ensure all subtasks done"
          condition: "has_subtasks == true"
          
        - id: "update_story_progress"
          action: "Report task completion to story"
          updates:
            - "task_status: completed"
            - "completion_time"
            - "deliverables"
            
    - id: "knowledge_generation"
      name: "Knowledge Generation"
      description: "Capture task learnings"
      steps:
        - id: "document_approach"
          action: "Record how task was completed"
          captures:
            - "Approach taken"
            - "Challenges faced"
            - "Solutions found"
            - "Time taken"
            
        - id: "extract_patterns"
          action: "Identify reusable patterns"
          categories:
            - "Technical patterns"
            - "Process improvements"
            - "Tool usage"
            - "Collaboration insights"
            
        - id: "store_learning"
          action: "Store learning entities in memory"
          entities:
            - type: "TaskLearning"
              attributes:
                - "task_id"
                - "approach_taken"
                - "challenges_faced"
                - "solutions_found"
                - "patterns_identified"
                - "time_taken"
                - "specialist_role"
            
        - id: "update_scores"
          action: "Update specialist scores"
          scoring:
            - "Task completion: +P points"
            - "Quality delivery: +Q points"
            - "Learning shared: Bonus"
            - "Issues found: Penalties"
          priority_bonuses:
            - "P0 task completion: +2.0P bonus"
            - "P1 task completion: +1.5P bonus"
            - "P2 task completion: +1.0P bonus"
            - "P3 task completion: +0.5P bonus"
            
git_operations:
  workflow_level: "inner"
  task_level:
    branch: "Created at story level (outer workflow)"
    commits: "Per task completion (inner workflow)"
    pushes: "Per task completion (inner workflow)"
    
  commit_standards:
    template: "{{task_id}}: {{summary}}"
    evidence_required: true
    conditional:
      - condition: "embedded_config.git_privacy == true"
        sanitize: ["AI", "Claude", "anthropic", "ðŸ¤–"]
        
  push_standards:
    validation_required:
      - "Tests passing"
      - "No merge conflicts"
      - "Task deliverables complete"
      - "Learning captured"
        
validation:
  task_completion:
    - "All subtasks completed (if any)"
    - "Validation passed"
    - "Reviews approved (if required)"
    - "Git operations completed (commits and pushes)"
    - "Knowledge captured and stored"
    
  quality_standards:
    - "Follows team conventions"
    - "Meets performance requirements"
    - "Security validated"
    - "Documentation updated"
    
  role_assignment_validation:
    mandatory: true
    blocking: true
    enforcement_requirements:
      - rule: "Task MUST be assigned to appropriate specialist"
        validation: "icc:validate-assignments() required"
        failure: "HALT - Cannot execute without proper specialist"
        
      - rule: "Reviewer MUST have domain expertise"
        validation: "icc:detect-work-type() + icc:validate-assignments()"
        failure: "HALT - Cannot review without domain expertise"
        
      - rule: "NO generic roles for specialist work"
        examples:
          - "AI work â†’ @AI-Engineer/@AI-Architect ONLY"
          - "Infrastructure â†’ Specialized DevOps roles ONLY"
          - "Security â†’ @Security-Engineer ONLY"
        failure: "HALT - Create specialist role"
        
      - rule: "Capability match >70% MANDATORY"
        validation: "Automated capability assessment"
        failure: "HALT - Create specialist if <70%"
        
      - rule: "Security reviews REQUIRED for architecture tasks"
        validation: "@Security-Engineer assignment mandatory"
        failure: "HALT - No architecture changes without security review"
    
  priority_execution:
    - "Execute tasks in priority order: P0 â†’ P1 â†’ P2 â†’ P3"
    - "Within same priority: blocking â†’ critical_path â†’ parallel â†’ optional"
    - "Priority display: [P0], [P1], [P2], [P3] prefixes"
    - "Priority bonuses: P0 (+2.0P), P1 (+1.5P), P2 (+1.0P), P3 (+0.5P)"
    - "Blocker escalation: Dependencies escalate to critical_path"
    - "System failures: Automatic escalation to P0"