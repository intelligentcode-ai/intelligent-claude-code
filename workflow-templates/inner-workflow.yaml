# Inner Workflow Template - Execution Process
# Defines how individual tasks are executed

metadata:
  name: "Standard Execution Workflow"
  version: "1.0.0"
  min_compatible: "1.0.0"
  description: |
    Standard workflow for executing individual tasks.
    Emphasizes knowledge retrieval at start and knowledge generation at end.
    
workflow:
  phases:
    - id: "knowledge_retrieval"
      name: "Knowledge Retrieval"
      description: "Retrieve relevant knowledge before execution"
      steps:
        - id: "search_solutions"
          action: "Search for similar implementations"
          queries:
            - "Past solutions for similar problems"
            - "Code patterns that worked"
            - "Known issues and fixes"
          outputs:
            - "relevant_code_patterns"
            - "proven_approaches"
            - "pitfalls_to_avoid"
            
        - id: "load_technical_context"
          action: "Load technical knowledge"
          sources:
            - "codebase_patterns"
            - "team_conventions"
            - "best_practices"
            
        - id: "review_task_context"
          action: "Understand task requirements"
          inputs:
            - "assignment_file"
            - "acceptance_criteria"
            - "embedded_config"
            
    - id: "implementation"
      name: "Implementation"
      description: "Execute the actual work"
      steps:
        - id: "setup_environment"
          action: "Prepare execution environment"
          tasks:
            - "Create feature branch"
            - "Setup dependencies"
            - "Configure tools"
          hooks:
            pre_execution:
              description: "Before implementation starts"
              allows: ["inject", "extend"]
              
        - id: "implement_solution"
          action: "Implement the solution"
          approach:
            - "Follow retrieved patterns"
            - "Apply best practices"
            - "Consider edge cases"
          outputs:
            - "code_changes"
            - "test_cases"
            - "documentation_updates"
            
        - id: "self_validation"
          action: "Validate own work"
          checks:
            - "Acceptance criteria met"
            - "Tests passing"
            - "No regressions"
            
    - id: "validation"
      name: "Validation"
      description: "Validate and test implementation"
      steps:
        - id: "run_tests"
          action: "Execute test suites"
          types:
            - "unit_tests"
            - "integration_tests"
            - "acceptance_tests"
          conditional:
            - condition: "embedded_config.testing_approach == 'comprehensive'"
              additional: ["performance_tests", "security_tests"]
              
        - id: "quality_checks"
          action: "Run quality validations"
          checks:
            - "Code standards"
            - "Security scanning"
            - "Documentation completeness"
          hooks:
            post_implementation:
              description: "After implementation complete"
              allows: ["inject", "extend", "validate"]
              
    - id: "review"
      name: "Review"
      description: "Peer review and feedback"
      steps:
        - id: "peer_review"
          action: "Domain expert review"
          reviewers:
            - "Based on capability match"
            - "Create specialist if needed"
          focus_areas:
            - "Code quality"
            - "Architecture alignment"
            - "Security considerations"
            
        - id: "handle_feedback"
          action: "Process review feedback"
          conditional:
            - condition: "embedded_config.blocking_enabled == false"
              action: "Create follow-up tasks for findings"
              template: "TASK-XXX-fix-[finding]"
            - condition: "embedded_config.blocking_enabled == true"
              action: "Block until findings resolved"
              
        - id: "final_validation"
          action: "Validate all criteria met"
          checks:
            - "All acceptance criteria passed"
            - "All reviews approved"
            - "All tests passing"
            
    - id: "knowledge_generation"
      name: "Knowledge Generation"
      description: "Capture execution learnings"
      steps:
        - id: "document_approach"
          action: "Record implementation approach"
          captures:
            - "Solution design"
            - "Implementation choices"
            - "Trade-offs made"
            
        - id: "capture_learnings"
          action: "Extract learnings"
          categories:
            - "What worked well"
            - "What was challenging"
            - "What to do differently"
            - "Reusable patterns"
            
        - id: "create_execution_entities"
          action: "Store in memory system"
          entities:
            - type: "TaskExecution"
              attributes:
                - "approach_taken"
                - "challenges_faced"
                - "solutions_found"
                - "time_taken"
                
        - id: "update_patterns"
          action: "Update pattern library"
          outputs:
            - "new_code_patterns"
            - "improved_approaches"
            - "anti_patterns_identified"
            
hooks:
  pre_execution:
    description: "Before implementation begins"
    timing: "before_implementation"
    allows: ["inject", "extend", "validate"]
    
  post_implementation:
    description: "After code complete"
    timing: "after_implementation"
    allows: ["inject", "extend", "validate"]
    
  pre_deployment:
    description: "Before marking done"
    timing: "end"
    allows: ["inject", "validate", "gate"]
    
customization:
  allow_step_override: true
  allow_step_insertion: true
  allow_conditional_steps: true
  
  example_conditions:
    - condition: "task_type == 'security'"
      insert_steps:
        - after: "implement_solution"
          step:
            id: "security_validation"
            action: "Run security-specific validations"
            
    - condition: "requires_performance_testing == true"
      insert_steps:
        - after: "run_tests"
          step:
            id: "performance_benchmarks"
            action: "Run performance benchmarks"
            
git_operations:
  branch_creation:
    template: "{{branch_prefix}}/{{task_id}}-{{description}}"
    from: "{{base_branch}}"
    
  commit_standards:
    template: "{{type}}: {{summary}}"
    conditional:
      - condition: "embedded_config.git_privacy == true"
        sanitize: ["AI", "Claude", "anthropic", "ðŸ¤–"]
        
  completion:
    merge_strategy: "squash"
    cleanup: "delete_branch"
    
validation:
  required_outputs:
    - "implementation_complete"
    - "tests_passing"
    - "reviews_approved"
    - "knowledge_captured"
    
  quality_gates:
    - "Acceptance criteria met"
    - "Peer review passed"
    - "Security scan clean"
    - "Knowledge retrieval performed"
    - "Knowledge generation completed"