# Large PRB Template - Complex Features (16-30 points)
# For sophisticated multi-component features requiring coordination

id: "[PARENT_ID]-PRB-[NEXT_NUMBER]-[TITLE]-[CURRENT_DATE]"
type: large-prb
complexity: complex
priority: "[PRIORITY_LEVEL]"
title: "[ROLE] [DESCRIPTION]"
requires_decomposition: true

# MANDATORY: Complete Context Section
complete_context:
  project_root: "[PROJECT_ROOT]"
  system_nature: "[SYSTEM_NATURE]"
  project_overview: "[PROJECT_OVERVIEW]"
  work_location: "[WORK_LOCATION]"
  key_context: "[KEY_CONTEXT]"
  system_features: "[SYSTEM_FEATURES]"
  configuration:
    git_privacy: "[FROM_CONFIG]"
    branch_protection: "[FROM_CONFIG]"
    default_branch: "[FROM_CONFIG]"
    branch_strategy: "[FROM_CONFIG]"
  business_goal: "[WHY_THIS_FEATURE_MATTERS]"
  technical_scope: "[SYSTEM_COMPONENTS_AFFECTED]"
  critical_files:
    - path: "[CORE_FILE_1]"
      purpose: "[PURPOSE_1]"
      sample: "[SAMPLE_1]"
    - path: "[CORE_FILE_2]"
      purpose: "[PURPOSE_2]"
      sample: "[SAMPLE_2]"
  user_requirements:
    original_request: "[USER_REQUEST]"
    success_criteria: "[SUCCESS_CRITERIA]"
    feature_scope: "[FEATURE_BOUNDARY]"
  
  specialization_context:
    technology_domains: "[TECHNOLOGY_DOMAINS]"
    specialist_creation: "ALWAYS create specialists when technology expertise is needed"
    unlimited_domains: "Support ANY technology domain through dynamic specialist creation"
    role_assignment: "PM + Specialist Architect determine when specialists should be created"
    coordination_specialists: "Create coordination specialists for complex multi-component features"
    domain_examples: "@React-Developer, @AWS-Engineer, @Kubernetes-DevOps-Engineer, @API-Architect"

# MANDATORY: Requirements Section
requirements:
  functional:
    - "[MAIN_FEATURE_REQUIREMENT]"
    - "[SUPPORTING_REQUIREMENT_1]"
    - "[SUPPORTING_REQUIREMENT_2]"
  processual:
    - "Apply git_privacy for all sub-component commits"
    - "Coordinate multi-component development"
    - "Manage feature branch strategy"
  technical:
    - "Multi-component integration"
    - "Complex feature coordination"

# Sub-PRB Decomposition Strategy
decomposition:
  approach: "Break into Medium/Tiny PRBs for manageable execution"
  sub_components:
    - component: "[COMPONENT_1]"
      prb_type: "medium"
      dependencies: []
    - component: "[COMPONENT_2]" 
      prb_type: "medium"
      dependencies: ["[COMPONENT_1]"]
    - component: "[INTEGRATION]"
      prb_type: "tiny"
      dependencies: ["[COMPONENT_1]", "[COMPONENT_2]"]
  validation_enforcement:
    mandatory_decomposition: true
    blocking_requirements:
      - "REQUIRED: Large PRBs MUST be broken into ≤15 point sub-PRBs"
      - "REQUIRED: Each sub-component must have clear dependencies"
      - "REQUIRED: Integration component must coordinate all parts"
      - "REQUIRED: Sub-PRB naming must follow parent-child format"
    sub_prb_limits:
      - "All sub-PRBs must be ≤15 complexity points"
      - "Sub-PRBs must use appropriate templates (medium/tiny)"
      - "Dependencies must be explicitly documented"
    error_message: "❌ Large PRBs MUST be decomposed into manageable sub-PRBs - direct execution FORBIDDEN"

# Coordination Strategy
coordination:
  execution_order: "Sequential based on dependencies"
  integration_points: "[HOW_COMPONENTS_CONNECT]"
  validation_strategy: "[HOW_TO_TEST_INTEGRATION]"

# MANDATORY: Knowledge Management
knowledge_management:
  capture_patterns: "Store complex feature coordination patterns"
  capture_insights: "Document multi-component integration approach"
  location: "memory/[topic]/complex-features.md"

# MANDATORY: Git Operations
git_operations:
  branch_strategy: "Feature branch with sub-component branches"
  commit_format: "[ID]: [DESCRIPTION]"
  privacy_filter: "[FROM_CONFIG]"
  coordination: "Merge sub-components to feature branch"
  validation_enforcement:
    mandatory_git_ops: true
    blocking_requirements:
      - "REQUIRED: Feature branch must be created for coordination"
      - "REQUIRED: Sub-component branches must be managed"
      - "REQUIRED: Commit format must follow [ID]: [DESCRIPTION] pattern"
      - "REQUIRED: Privacy filter must be applied according to config"
    disallowed_entries:
      - "No git operations needed"
      - "Skip git workflow"
      - "Manual file changes only"
    error_message: "❌ Large PRBs MUST follow git workflow - 'No git operations needed' is FORBIDDEN"

# MANDATORY: Review Process
review_process:
  type: "architectural_review"
  reviewer: "[PRE_ASSIGNED_ARCHITECT]"
  focus: "Component integration and system design"
  validation_enforcement:
    mandatory_review: true
    blocking_requirements:
      - "REQUIRED: Architectural review must be completed before merge"
      - "REQUIRED: Component integration validation must pass"
      - "REQUIRED: System design review must be documented"
    disallowed_entries:
      - "No review needed"
      - "Review not required"
      - "Skip architectural review"
    error_message: "❌ Large PRBs MUST have architectural review - 'No review needed' is FORBIDDEN"

# MANDATORY: Documentation Updates
documentation_updates:
  changelog: "Document major feature addition"
  architecture_docs: "Update system architecture if needed"
  user_docs: "Update user-facing documentation"
  validation_enforcement:
    mandatory_docs: true
    blocking_requirements:
      - "REQUIRED: CHANGELOG must be updated with major feature addition"
      - "REQUIRED: Architecture docs must be updated if system design changes"
      - "REQUIRED: User documentation must reflect new functionality"
    disallowed_entries:
      - "No documentation needed"
      - "Documentation not required"
      - "Skip documentation updates"
    error_message: "❌ Large PRBs MUST update documentation - 'No documentation needed' is FORBIDDEN"

# MANDATORY: Workflow Configuration
workflow:
  version_bump: "[WORKFLOW_VERSION_BUMP]"
  version_type: "[WORKFLOW_VERSION_TYPE]"
  changelog_required: "[WORKFLOW_CHANGELOG_REQUIRED]"
  pr_required: "[WORKFLOW_PR_REQUIRED]"
  merge_strategy: "[WORKFLOW_MERGE_STRATEGY]"
  release_automation: "[WORKFLOW_RELEASE_AUTOMATION]"
  auto_merge: "[WORKFLOW_AUTO_MERGE]"
  coordination_required: "[WORKFLOW_COORDINATION_REQUIRED]"
  breaking_change_assessment: "[WORKFLOW_BREAKING_CHANGE_ASSESSMENT]"

# Execution Strategy
execution_strategy: |
  1. Create feature branch for overall coordination
  2. Generate and execute sub-PRBs in dependency order
  3. Integrate components on feature branch
  4. Comprehensive testing and validation
  5. Update documentation and create pull request
  
# EXECUTION CHECKLIST
execution_checklist: |
  ☐ Feature branch created for coordination (MANDATORY - validation enforced)
  ☐ Sub-PRBs generated with proper dependencies (MANDATORY - decomposition enforced)
  ☐ Components executed in correct order (MANDATORY - coordination validation)
  ☐ Integration completed and tested (MANDATORY - integration validation)
  ☐ Documentation updated comprehensively (MANDATORY - no "No documentation needed")
  ☐ Architectural review completed (MANDATORY - no "Review not required")
  ☐ Git operations followed properly (MANDATORY - no "No git operations needed")
  ☐ All validation enforcement rules verified
  ☐ Pull request created with detailed description