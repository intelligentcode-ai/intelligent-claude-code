# Configurable PRB Template - Shows project customization
# This template demonstrates how PRBs adapt to project configuration

id: "[TYPE]-[AUTO]"
type: configurable-prb
project: "[PROJECT_NAME]"

# Project-specific configuration (from CLAUDE.md)
project_config:
  coding_style: "[FROM_CLAUDE_MD]"     # e.g., airbnb, google, custom
  architecture: "[FROM_CLAUDE_MD]"     # e.g., microservices, serverless
  testing: "[FROM_CLAUDE_MD]"          # e.g., tdd, bdd, integration-first
  error_handling: "[FROM_CLAUDE_MD]"   # e.g., defensive, fail-fast
  
# Integrated best practices and standards
integrated_context:
  best_practices:
    - file: ".claude/best-practices/[DOMAIN].md"
      apply: "[SPECIFIC_SECTIONS]"
    - file: ".claude/best-practices/security.md"
      apply: "authentication, data-validation"
      
  architecture_docs:
    - file: ".claude/architecture/patterns.md"
      enforce: "[PATTERN_NAME]"
    - file: ".claude/architecture/constraints.md"
      validate_against: true
      
  code_patterns:
    search_in_codebase:
      - pattern: "[SIMILAR_FEATURE_PATTERN]"
        files: ["src/**/*.js", "lib/**/*.js"]
      - pattern: "[API_ENDPOINT_PATTERN]"
        files: ["src/api/**/*.js"]
    reuse_from:
      - "src/components/auth/Login.js"  # Example to follow
      
  external_docs:
    context7:
      - library: "/facebook/react"
        topics: "hooks, context, optimization"
      - library: "/hashicorp/terraform"
        topics: "modules, providers, state"
    urls:
      - name: "AWS Well-Architected"
        url: "https://aws.amazon.com/architecture/"
        
# Behavioral patterns (embedded, not enforced externally)
embedded_behaviors:
  validation:
    style: "[PROJECT_VALIDATION_STYLE]"  # strict, permissive, balanced
    enforcement: "build-time"            # build-time, runtime, both
    
  error_handling:
    approach: "[PROJECT_ERROR_APPROACH]"  # try-catch, result-types, hybrid
    logging: "[PROJECT_LOGGING_STYLE]"    # structured, simple, none
    
  testing:
    methodology: "[PROJECT_TEST_METHOD]"  # tdd, bdd, test-after
    coverage_target: "[COVERAGE_PERCENT]"
    types: ["unit", "integration", "e2e"]
    
  code_review:
    depth: "[PROJECT_REVIEW_DEPTH]"      # quick, balanced, thorough
    focus_areas: "[PROJECT_FOCUS]"       # security, performance, readability
    
# Execution with embedded project patterns
execution:
  follows_patterns:
    - "Use dependency injection as per architecture docs"
    - "Apply [PROJECT_NAME] naming conventions"
    - "Follow [CODING_STYLE] formatting rules"
    - "Implement error handling per project standards"
    
  includes_from_project:
    - "Logging utility from lib/logger"
    - "Validation schemas from lib/validation"
    - "Common types from types/index.d.ts"
    
  respects_constraints:
    - "No direct database access in controllers"
    - "All APIs must be versioned"
    - "Authentication required for all endpoints"
    
# Quality criteria based on project standards
validation_criteria:
  code_quality:
    - "Passes [PROJECT_LINTER] without warnings"
    - "Follows [PROJECT_NAME] naming conventions"
    - "Includes JSDoc/TSDoc comments"
    
  architecture_compliance:
    - "Maintains layer separation"
    - "Uses approved design patterns"
    - "No circular dependencies"
    
  security:
    - "Input validation on all endpoints"
    - "No hardcoded secrets"
    - "OWASP Top 10 compliance"
    
# Learning capture with project context
retrospective:
  capture_for_project:
    - "New patterns discovered"
    - "Reusable components created"
    - "Architecture decisions made"
  update_best_practices:
    - "Add to .claude/best-practices/"
    - "Update code samples"
    - "Document in architecture/decisions/"