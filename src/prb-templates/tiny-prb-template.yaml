# Tiny PRB Template - Simple Changes (3-5 points)  
# For single-file modifications and straightforward features

id: "[PARENT_ID]-PRB-[NEXT_NUMBER]-[TITLE]-[CURRENT_DATE]"
type: tiny-prb
complexity: simple
priority: "[PRIORITY_LEVEL]"
title: "[ROLE] [DESCRIPTION]"

# MANDATORY: Complete Context Section
complete_context:
  project_root: "[PROJECT_ROOT]"
  system_nature: "[SYSTEM_NATURE]"
  configuration:
    git_privacy: "[FROM_CONFIG]"
    branch_protection: "[FROM_CONFIG]"
    default_branch: "[FROM_CONFIG]"
    branch_strategy: "[FROM_CONFIG]"
  critical_files:
    - path: "[PRIMARY_FILE]"
      purpose: "[FILE_PURPOSE]"
      sample: "[FILE_SAMPLE]"
  user_requirements:
    original_request: "[USER_REQUEST]"
    success_criteria: "[SUCCESS_CRITERIA]"

# MANDATORY: Requirements Section
requirements:
  functional:
    - "[WHAT_TO_IMPLEMENT]"
    - "[EXPECTED_BEHAVIOR]"
  processual:
    - "Apply git_privacy setting for commit messages"
    - "Follow branch protection strategy"
    - "Single file modification scope"
  technical:
    - "Under 50 lines of changes"

# ========================================
# EXECUTION PROCESS: 5 CLEAR STEPS
# ========================================

## STEP 1: KNOWLEDGE GATHERING
knowledge_gathering:
  memory_search: "Search memory/[topic]/ for implementation patterns"
  best_practices: "Review best-practices/[domain]/ for guidance"
  code_analysis: "Examine existing code patterns in project"
  embedded_learnings: "[TOP_RELEVANT_PATTERNS]"

## STEP 2: IMPLEMENTATION
implementation:
  target_file: "[FILE_PATH]"
  changes_needed:
    - "[CHANGE_1]"
    - "[CHANGE_2]"
    - "[CHANGE_3]"
  validation_approach: "[HOW_TO_TEST]"

## STEP 3: REVIEW
review_process:
  type: "self-review"
  checklist:
    - "Functional requirements met"
    - "Code follows project patterns"
    - "No unintended side effects"
    - "Configuration settings applied"

## STEP 4: DOCUMENTATION
documentation_updates:
  changelog:
    file: "CHANGELOG.md"
    entry: "### Added/Fixed\n- [FEATURE_DESCRIPTION]"
  readme_check: "[UPDATE_IF_USER_FACING]"
  comments: "Add inline comments for complex logic"

## STEP 5: GIT OPERATIONS  
git_operations:
  branch_name: "[FROM_CONFIG_PREFIX]/[ID]-[DESCRIPTION]"
  commit_format: "[ID]: [DESCRIPTION]"
  privacy_filter: "[FROM_CONFIG]" # Apply if git_privacy enabled
  version_bump: "[NONE|PATCH]"
  actions:
    - "Create feature branch if needed"
    - "Commit changes with clear message"
    - "Push to remote repository"

# MANDATORY: Knowledge Management
knowledge_management:
  capture_condition: "Store if novel implementation pattern"
  pattern_type: "implementation_approach"
  location: "memory/[topic]/[subtopic].md"

# EXECUTION CHECKLIST
execution_checklist: |
  ☐ STEP 1: Knowledge gathered - memory searched, patterns identified
  ☐ STEP 2: Implementation completed - changes made and validated
  ☐ STEP 3: Review completed - self-review checklist satisfied
  ☐ STEP 4: Documentation updated - CHANGELOG and relevant docs
  ☐ STEP 5: Git operations executed - branch, commit, push with privacy
  ☐ Knowledge captured if novel pattern discovered