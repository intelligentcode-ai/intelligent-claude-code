# Tiny PRB Template - Simple Changes (3-5 points)  
# For single-file modifications and straightforward features

id: "[PARENT_ID]-PRB-[NEXT_NUMBER]-[TITLE]-[CURRENT_DATE]"
type: tiny-prb
complexity: simple
priority: "[PRIORITY_LEVEL]"
title: "[ROLE] [DESCRIPTION]"

# MANDATORY: Complete Context Section
complete_context:
  project_root: "[PROJECT_ROOT]"
  system_nature: "[SYSTEM_NATURE]"
  configuration:
    git_privacy: "[FROM_CONFIG]"
    branch_protection: "[FROM_CONFIG]"
    default_branch: "[FROM_CONFIG]"
    branch_strategy: "[FROM_CONFIG]"
  critical_files:
    - path: "[PRIMARY_FILE]"
      purpose: "[FILE_PURPOSE]"
      sample: "[FILE_SAMPLE]"
  user_requirements:
    original_request: "[USER_REQUEST]"
    success_criteria: "[SUCCESS_CRITERIA]"
  
  specialization_context:
    technology_domains: "[TECHNOLOGY_DOMAINS]"
    specialist_creation: "ALWAYS create specialists when technology expertise is needed"
    unlimited_domains: "Support ANY technology domain through dynamic specialist creation"
    role_assignment: "PM + Specialist Architect determine when specialists should be created"

# MANDATORY: Requirements Section
requirements:
  functional:
    - "[WHAT_TO_IMPLEMENT]"
    - "[EXPECTED_BEHAVIOR]"
  processual:
    - "Apply git_privacy setting for commit messages"
    - "Follow branch protection strategy"
    - "Single file modification scope"
  technical:
    - "Under 50 lines of changes"

# ========================================
# EXECUTION PROCESS: 7 CLEAR STEPS
# ========================================

## STEP 1: KNOWLEDGE
knowledge_search:
  memory_search: "Search memory/[topic]/ for implementation patterns"
  best_practices: "Review best-practices/[domain]/ for guidance"
  patterns: "[TOP_RELEVANT_PATTERNS]"

## STEP 2: IMPLEMENTATION
implementation:
  target_file: "[FILE_PATH]"
  changes_needed:
    - "[CHANGE_1]"
    - "[CHANGE_2]"
  validation: "[HOW_TO_TEST]"

## STEP 3: REVIEW
review_checklist:
  - "Functional requirements met"
  - "Code follows project patterns"
  - "No unintended side effects"

## STEP 4: VERSION
version_bump:
  type: "patch"
  action: "Bump version number appropriately"

## STEP 5: DOCUMENTATION
documentation:
  changelog:
    entry: "### Added/Fixed\n- [FEATURE_DESCRIPTION]"
    required: true
  additional: "Update any affected docs as needed"
  comments: "Add inline comments for complex logic"

## STEP 6: GIT COMMIT
git_commit:
  commit_message: "[ID]: [DESCRIPTION]"
  privacy_filter: "[FROM_CONFIG]"
  action: "Commit changes with clean message (no AI mentions)"

## STEP 7: GIT PUSH
git_push:
  action: "Push to remote repository"

# EXECUTION CHECKLIST
execution_checklist: |
  ☐ Step 1 - Knowledge: Memory searched and patterns identified
  ☐ Step 2 - Implementation: Changes made and validated
  ☐ Step 3 - Review: Self-review checklist completed
  ☐ Step 4 - Version: Version bumped appropriately
  ☐ Step 5 - Documentation: CHANGELOG updated (minimum) + affected docs
  ☐ Step 6 - Git Commit: Changes committed with privacy filter
  ☐ Step 7 - Git Push: Changes pushed to remote