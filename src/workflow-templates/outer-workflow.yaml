metadata:
  name: "Epic and Story Planning Workflow"
  version: "2.0.0"
  min_compatible: "2.0.0"
workflow:
  phases:
    - id: knowledge_retrieval
      steps:
        - id: search_similar_epics
          queries: ["Similar features implemented", "Past architectural decisions", "Lessons learned from related work"]
          outputs: [relevant_patterns, reusable_solutions, known_pitfalls]
    - id: epic_definition
      responsible: ["@PM", "@Architect", "@Requirements-Engineer", "User"]
      steps:
        - id: define_epic_scope
          outputs: [epic_objectives, success_metrics, constraints]
    - id: story_creation
      responsible: ["@PM", "@Architect", "@Requirements-Engineer", "User"]
      steps:
        - id: identify_stories
          story_types: ["NEW_FEATURE", "ENHANCEMENT", "REFACTOR"]
          priority_inheritance: ["Story priority = MAX(epic.priority, story.severity_priority)", "Security stories → P0", "Customer bugs → +1 level"]
        - id: identify_bugs
          bug_properties: [severity, reproducibility, impact]
          priority_mapping: ["CRITICAL → P0", "HIGH → P1", "MEDIUM → P2", "LOW → P3"]
      hooks:
        post_story_creation: {allows: [inject, extend]}
    - id: task_decomposition
      steps:
        - id: identify_task_types
          common_tasks: [knowledge_loading, research, implementation, peer_review, documentation, testing, git_operations, deployment, knowledge_creation]
        - id: sequence_tasks
          outputs: [dependency_graph, parallel_opportunities, critical_path]
          priority_logic: ["Inherit from story", "P0→P1→P2→P3", "blocking→critical_path→parallel→optional"]
        - id: assign_specialists
          validation_required: true
          mandatory_requirements: ["[Role] in title", "Min 3 subtasks", "Identify parallelization", "Sequential thinking", "Ultrathinking", "Ultra-experienced specialists"]
          validation_chain:
            - {step: detect_work_type, command: "/icc-detect-work-type", blocking: true}
            - {step: architect_triage, command: "/icc-require-triage", blocking: true, enforced_rules: ["AI work → @AI-Architect/@AI-Engineer", "Infrastructure → DevOps roles", "Security → @Security-Engineer"]}
            - {step: validate_capability, command: "/icc-validate-assignments", blocking: true, failure_action: "Create specialist if <70%"}
            - {step: final_approval, command: "/icc-require-approval", blocking: true, approval_requirements: ["Capability validated", "Specialist appropriate", "No generic roles", "Load balanced"]}
    - id: git_operations
      steps:
        - {id: create_feature_branch, template: "{{type}}/{{id}}-{{title-slug}}"}
        - {id: coordinate_merges, validates: ["All commits present", "No conflicts", "Tests passing", "Reviews approved"]}
        - {id: prepare_integration, requirements: ["Tasks completed", "Integration tests passing", "Docs updated"]}
    - id: acceptance_criteria
      steps:
        - {id: story_acceptance, criteria: ["Tasks completed", "Integration successful", "Tests passing", "Docs updated", "Branch ready"]}
        - {id: bug_resolution, criteria: ["Root cause addressed", "Regression tests added", "No side effects", "Branch ready"]}
    - id: knowledge_generation
      steps:
        - {id: document_decisions, captures: ["Epic breakdown", "Story priorities", "Task assignments", "Risk mitigations"]}
        - {id: synthesize_task_learning, inputs: ["Task learning entities", "Task outcomes", "Cross-task patterns"], outputs: ["Story insights", "Process improvements", "Architecture patterns"]}
        - id: create_planning_entities
          entities:
            - {type: EpicPlanning, attributes: [objectives, stories, risks, timeline]}
            - {type: StoryLearning, attributes: [story_id, task_outcomes, cross_task_patterns, architecture_insights, process_improvements, team_collaboration_patterns]}
hooks:
  pre_planning: {timing: start, allows: [inject, extend]}
  post_story_creation: {timing: after_story_creation, allows: [inject, extend, validate]}
  pre_task_assignment:
    timing: before_task_decomposition
    allows: [inject, validate]
    blocking: true
    validation_required:
      - {command: "/icc-detect-work-type", failure: "HALT - work type detection required"}
      - {command: "/icc-require-triage", failure: "HALT - architect approval required", enforces: ["AI work → @AI-Architect/@AI-Engineer ONLY", "Infrastructure → DevOps ONLY", "Generic roles → BLOCKED"]}
      - {command: "/icc-validate-assignments", failure: "HALT - create specialist if <70%"}
      - {command: "/icc-require-approval", failure: "HALT - dual approval required"}
git_operations:
  workflow_level: outer
  story_level: {branches: "Per story/bug", merges: "Per story/bug completion"}
  branch_standards: {template: "{{type}}/{{id}}-{{title-slug}}", types: [story, bug]}
  merge_standards: {validation_required: ["All commits present", "No conflicts", "Tests passing", "Reviews approved", "Learning synthesized"]}
validation:
  required_outputs: [epic_definition, stories_or_bugs, task_breakdown, specialist_assignments, acceptance_criteria, git_operations_planned, knowledge_captured]
  hierarchy_rules: ["Story/bug → epic", "Task → story/bug", "Specialists only", "Subtasks optional"]
  role_assignment_validation:
    mandatory: true
    blocking: true
    enforcement_chain:
      - {step: work_type_detection, rule: "ALL tasks analyzed via /icc-detect-work-type", failure: "HALT"}
      - {step: architect_approval, rule: "PM + Architect approve ALL", failure: "HALT"}
      - {step: specialist_enforcement, rules: ["AI → @AI-Architect/@AI-Engineer", "Infrastructure → @System/@DevOps-Engineer", "Security → @Security-Engineer", "Generic → BLOCKED"], failure: "HALT"}
      - {step: capability_validation, rule: ">70% match REQUIRED", failure: "HALT"}
      - {step: peer_review_validation, rule: "Domain expert SMEs only", failure: "HALT"}
  priority_system: ["P0→P1→P2→P3", "Story = MAX(epic, severity)", "Task inherits + type", "blocking→critical_path→parallel→optional", "Security → P0", "Customer bugs → +1 level"]