metadata:
  name: "Task Execution Workflow"
  version: "2.0.0"
  min_compatible: "2.0.0"
workflow:
  validation_gates:
    pre_execution:
      blocking: true
      requirements: ["Task validated via /icc-validate-assignments", "Specialist verified >70%", "No generic roles", "Architect approval for AI/infrastructure"]
      failure: "HALT - validation required"
  phases:
    - id: knowledge_retrieval
      steps:
        - id: search_task_patterns
          queries: ["Past solutions", "Code patterns", "Known issues"]
          outputs: [relevant_patterns, proven_approaches, pitfalls_to_avoid]
        - id: load_story_context
          inputs: [story_objectives, task_assignment, dependencies]
    - id: task_planning
      steps:
        - {id: assess_complexity, decision: ["Simple: Direct execution", "Complex: Create subtasks"]}
        - {id: create_subtasks, condition: "complexity == high", subtask_examples: ["Setup", "Core logic", "Error handling", "Tests", "Docs"]}
      hooks: {pre_execution: {allows: [inject, extend]}}
    - id: task_execution
      steps:
        - {id: execute_work, approach: ["Follow patterns", "Apply expertise", "Edge cases", "Quality standards"]}
        - id: track_progress
          statuses: [in_progress, blocked, completed, needs_review]
          priority_display: ["[P0], [P1], [P2], [P3]", "Highlight P0, dim P3", "Sort by priority"]
        - id: handle_blockers
          escalation: ["Technical â†’ Architect", "Requirements â†’ PM/RE", "Dependencies â†’ Team"]
          priority_escalation: ["Blocking â†’ critical_path", "System failures â†’ P0", "Customer â†’ +1 level"]
    - id: task_validation
      steps:
        - {id: self_validation, checks: ["Objectives met", "Quality standards", "No regressions"]}
        - {id: automated_checks, types: [tests, linting, security_scans]}
      hooks: {post_execution: {allows: [inject, extend, validate]}}
    - id: peer_review
      condition: "task_type requires review"
      steps:
        - id: assign_reviewer
          validation_required: true
          validation_chain:
            - {step: detect_review_type, command: "/icc-detect-work-type", blocking: true}
            - {step: validate_reviewer, command: "/icc-validate-assignments", blocking: true, enforced_rules: ["AI â†’ @AI-Engineer/@AI-Architect", "Security â†’ @Security-Engineer", "Infrastructure â†’ @DevOps/@System-Engineer", "Generic â†’ BLOCKED"]}
          criteria: ["Domain expertise MANDATORY", "Not implementer", ">70% match", "Available"]
        - {id: conduct_review, focus: [Correctness, Quality, Standards]}
        - id: handle_feedback
          conditional:
            - {condition: "embedded_config.blocking_enabled == false", action: "Create follow-up tasks"}
            - {condition: "embedded_config.blocking_enabled == true", action: "Block until resolved"}
    - id: git_operations
      steps:
        - id: commit_changes
          template: "{{task_id}}: {{summary}}"
          includes: [task_deliverables, implementation_files, test_files, documentation_updates]
          conditional: [{condition: "embedded_config.git_privacy == true", sanitize: ["AI", "Claude", "anthropic", "ðŸ¤–"]}]
        - {id: push_changes, validates: ["Tests passing", "No conflicts", "Deliverables complete"]}
    - id: task_completion
      steps:
        - {id: verify_subtasks, condition: "has_subtasks == true"}
        - {id: update_story_progress, updates: ["task_status: completed", completion_time, deliverables]}
    - id: knowledge_generation
      steps:
        - {id: document_approach, captures: ["Approach", "Challenges", "Solutions", "Time"]}
        - {id: extract_patterns, categories: ["Technical", "Process", "Tools", "Collaboration"]}
        - id: store_learning
          entities: [{type: TaskLearning, attributes: [task_id, approach_taken, challenges_faced, solutions_found, patterns_identified, time_taken, specialist_role]}]
        - id: update_scores
          scoring: ["Completion: +P", "Quality: +Q", "Learning: Bonus", "Issues: Penalties"]
          priority_bonuses: ["P0: +2.0P", "P1: +1.5P", "P2: +1.0P", "P3: +0.5P"]
git_operations:
  workflow_level: inner
  task_level: {branch: "From story level", commits: "Per task", pushes: "Per task"}
  commit_standards: {template: "{{task_id}}: {{summary}}", evidence_required: true, conditional: [{condition: "embedded_config.git_privacy == true", sanitize: ["AI", "Claude", "anthropic", "ðŸ¤–"]}]}
  push_standards: {validation_required: ["Tests passing", "No conflicts", "Deliverables complete", "Learning captured"]}
validation:
  task_completion: ["Subtasks completed", "Validation passed", "Reviews approved", "Git operations done", "Knowledge captured"]
  quality_standards: ["Team conventions", "Performance", "Security", "Docs updated"]
  role_assignment_validation:
    mandatory: true
    blocking: true
    enforcement_requirements:
      - {rule: "Task â†’ appropriate specialist", validation: "/icc-validate-assignments", failure: "HALT"}
      - {rule: "Reviewer â†’ domain expertise", validation: "/icc-detect-work-type + /icc-validate-assignments", failure: "HALT"}
      - {rule: "NO generic roles", examples: ["AI â†’ @AI-Engineer/@AI-Architect", "Infrastructure â†’ DevOps", "Security â†’ @Security-Engineer"], failure: "HALT"}
      - {rule: ">70% match MANDATORY", validation: "Capability assessment", failure: "HALT"}
      - {rule: "Security reviews for architecture", validation: "@Security-Engineer mandatory", failure: "HALT"}
  priority_execution: ["P0â†’P1â†’P2â†’P3", "blockingâ†’critical_pathâ†’parallelâ†’optional", "[P0], [P1], [P2], [P3] prefixes", "Bonuses: P0(+2.0P), P1(+1.5P), P2(+1.0P), P3(+0.5P)", "Blockers â†’ critical_path", "System failures â†’ P0"]