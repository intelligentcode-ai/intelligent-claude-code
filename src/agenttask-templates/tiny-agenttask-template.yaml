# Tiny AgentTask Template - Simple Changes (3-5 points)
# For single-file modifications and straightforward features

git_privacy: [GIT_PRIVACY_SETTING]
id: "[PARENT_ID]-AGENTTASK-[NEXT_NUMBER]-[TITLE]-[CURRENT_DATE]"
type: tiny-agenttask
complexity: simple
priority: "[PRIORITY_LEVEL]"
title: "[ROLE] [DESCRIPTION]"

# MANDATORY: Complete Context Section
complete_context:
  project_root: "[PROJECT_ROOT]"
  system_nature: "[SYSTEM_NATURE]"
  project_overview: "[PROJECT_OVERVIEW]"
  work_location: "[WORK_LOCATION]"
  key_context: "[KEY_CONTEXT]"
  system_features: "[SYSTEM_FEATURES]"
  configuration:
    git_privacy: "[FROM_CONFIG]"
    branch_protection: "[FROM_CONFIG]"
    default_branch: "[FROM_CONFIG]"
    branch_strategy: "[FROM_CONFIG]"
  critical_files:
    - path: "[PRIMARY_FILE]"
      purpose: "[FILE_PURPOSE]"
      sample: "[FILE_SAMPLE]"
  user_requirements:
    original_request: "[USER_REQUEST]"
    success_criteria: "[SUCCESS_CRITERIA]"
  
  specialization_context:
    technology_domains: "[TECHNOLOGY_DOMAINS]"
    specialist_creation: "ALWAYS create specialists when technology expertise is needed"
    unlimited_domains: "Support ANY technology domain through dynamic specialist creation"
    role_assignment: "PM + Specialist Architect determine when specialists should be created"

# MANDATORY: Requirements Section
requirements:
  functional:
    - "[WHAT_TO_IMPLEMENT]"
    - "[EXPECTED_BEHAVIOR]"
  processual:
    - "Apply git_privacy setting for commit messages"
    - "Follow branch protection strategy"
    - "Single file modification scope"
  technical:
    - "Under 50 lines of changes"

# ========================================
# EXECUTION PROCESS: 7 CLEAR STEPS
# ========================================

execution_notes: |
  CRITICAL: MANDATORY git_privacy validation BEFORE ALL git operations:
  1. Load git_privacy setting from configuration (NEVER assume)
  2. When git_privacy=true, strip ALL AI mentions from:
     - Commit messages (remove "AI", "Claude", "agent", "Generated with Claude Code", etc.)
     - PR descriptions and titles
     - Release notes and changelogs
     - Any git-visible text including co-author attributions
  3. Use clean, professional language in all git operations
  4. Block git operations if privacy setting not validated

## STEP 1: KNOWLEDGE
knowledge_search:
  memory_search: "Search memory/[topic]/ for implementation patterns"
  best_practices: "Review best-practices/[domain]/ for guidance"
  patterns: "[TOP_RELEVANT_PATTERNS]"

## STEP 2: IMPLEMENTATION
implementation:
  target_file: "[FILE_PATH]"
  changes_needed:
    - "[CHANGE_1]"
    - "[CHANGE_2]"
  validation: "[HOW_TO_TEST]"

## STEP 3: REVIEW
review_checklist:
  - "Functional requirements met"
  - "Code follows project patterns"
  - "No unintended side effects"

## STEP 4: VERSION
version_bump:
  type: "patch"
  action: "Bump version number appropriately"

## STEP 5: DOCUMENTATION
documentation:
  changelog:
    entry: "### Added/Fixed\n- [FEATURE_DESCRIPTION]"
    required: true
  additional: "Update any affected docs as needed"
  comments: "Add inline comments for complex logic"

## STEP 6: GIT COMMIT
git_commit:
  commit_message: "[ID]: [DESCRIPTION]"
  privacy_filter: "[FROM_CONFIG]"
  action: "Commit changes with clean message (no AI mentions)"

## STEP 7: GIT PUSH
git_push:
  action: "Push to remote repository"

# MANDATORY: Validation Enforcement Section
<validation_enforcement id="TINY-AGENTTASK-VALIDATION">
  <memory_requirements mandatory="true">
    <pre_execution>
      <requirement>Memory search completed for [work_type] and [technology_domain] topics</requirement>
      <requirement>Relevant patterns identified and embedded in context</requirement>
      <requirement>Best practices reviewed for applicable guidance</requirement>
      <requirement>Similar implementation patterns discovered and applied</requirement>
    </pre_execution>
    <blocked_patterns>
      <pattern>No memory search needed</pattern>
      <pattern>Skip memory check</pattern>
      <pattern>Too simple for memory</pattern>
      <pattern>No patterns available</pattern>
      <pattern>Fresh implementation without patterns</pattern>
    </blocked_patterns>
    <error_message>❌ BLOCKED: Memory search is mandatory before execution - search memory/[topic]/ for patterns</error_message>

    <post_execution>
      <requirement>Execution analyzed for lessons learned</requirement>
      <requirement>Success/failure patterns identified</requirement>
      <requirement>Relevance filters applied before storage decision</requirement>
      <requirement>Storage ONLY if clear future value demonstrated</requirement>
      <requirement>Security validation: no credentials or sensitive data</requirement>
    </post_execution>
    <post_blocked_patterns>
      <pattern>Store to satisfy requirement</pattern>
      <pattern>No learnings to capture</pattern>
      <pattern>Skip memory storage</pattern>
      <pattern>Nothing worth storing</pattern>
      <pattern>Too trivial to document</pattern>
    </post_blocked_patterns>
    <post_error_message>❌ BLOCKED: Automatic analysis mandatory - evaluate execution for reusable patterns</post_error_message>
  </memory_requirements>

  <mandatory_requirements>
    <git_operations mandatory="true">
      <requirement>Feature branch creation (if branch_protection enabled)</requirement>
      <requirement>Git commit with descriptive message following [ID]: [DESCRIPTION] format</requirement>
      <requirement>Git push to remote with proper branch handling</requirement>
      <requirement>Privacy filter applied to all commit messages</requirement>
      <blocked_patterns>
        <pattern>No git operations needed</pattern>
        <pattern>Skip git workflow</pattern>
        <pattern>Direct commit to main</pattern>
        <pattern>No branching required</pattern>
        <pattern>Simple change, no git process</pattern>
      </blocked_patterns>
      <error_message>❌ BLOCKED: Git operations are mandatory. Branch protection and commit standards must be followed.</error_message>
    </git_operations>

    <sme_review mandatory="true">
      <requirement>Self-review checklist completion with all items checked</requirement>
      <requirement>Code quality validation against project standards</requirement>
      <requirement>Functional requirements verification</requirement>
      <requirement>Technical standards compliance check</requirement>
      <blocked_patterns>
        <pattern>No review needed</pattern>
        <pattern>Skip validation steps</pattern>
        <pattern>Obvious changes</pattern>
        <pattern>Too small for review</pattern>
        <pattern>Self-evident implementation</pattern>
      </blocked_patterns>
      <error_message>❌ BLOCKED: SME review processes are mandatory for all AgentTasks regardless of size.</error_message>
    </sme_review>

    <documentation mandatory="true">
      <requirement>CHANGELOG entry required for all changes</requirement>
      <requirement>Inline code comments for complex logic added</requirement>
      <requirement>Affected documentation files updated</requirement>
      <requirement>API documentation updated if applicable</requirement>
      <blocked_patterns>
        <pattern>No documentation needed</pattern>
        <pattern>Self-documenting code</pattern>
        <pattern>Skip CHANGELOG</pattern>
        <pattern>No docs affected</pattern>
        <pattern>Too simple to document</pattern>
      </blocked_patterns>
      <error_message>❌ BLOCKED: Documentation updates are mandatory. CHANGELOG and code comments required.</error_message>
    </documentation>

    <version_management mandatory="true">
      <requirement>Version bump completed appropriately (patch level)</requirement>
      <requirement>Version consistency maintained across affected files</requirement>
      <blocked_patterns>
        <pattern>No version change needed</pattern>
        <pattern>Skip versioning</pattern>
        <pattern>Version not applicable</pattern>
      </blocked_patterns>
      <error_message>❌ BLOCKED: Version management is mandatory for all changes.</error_message>
    </version_management>
  </mandatory_requirements>

  <workflow>
    <version_bump>[WORKFLOW_VERSION_BUMP]</version_bump>
    <version_type>[WORKFLOW_VERSION_TYPE]</version_type>
    <changelog_required>[WORKFLOW_CHANGELOG_REQUIRED]</changelog_required>
    <pr_required>[WORKFLOW_PR_REQUIRED]</pr_required>
    <merge_strategy>[WORKFLOW_MERGE_STRATEGY]</merge_strategy>
    <release_automation>[WORKFLOW_RELEASE_AUTOMATION]</release_automation>
    <auto_merge>[WORKFLOW_AUTO_MERGE]</auto_merge>
    <coordination_required>[WORKFLOW_COORDINATION_REQUIRED]</coordination_required>
    <breaking_change_assessment>[WORKFLOW_BREAKING_CHANGE_ASSESSMENT]</breaking_change_assessment>
  </workflow>

  <enforcement_rules>
    <rule>ALL 7 execution steps must be completed in order</rule>
    <rule>NO bypass language or skip patterns allowed</rule>
    <rule>MANDATORY git workflow compliance per project configuration</rule>
    <rule>REQUIRED documentation updates for every change</rule>
    <rule>VERSION bump mandatory for all modifications</rule>
  </enforcement_rules>
</validation_enforcement>

# MCP Operations Extension Points
mcp_operations:
  memory:
    condition: "[MCP_MEMORY_ENABLED]"
    provider: "[MCP_MEMORY_PROVIDER]"
    operations:
      - action: store_learning
        topic: "[LEARNING_TOPIC]"
        content: "[LEARNING_CONTENT]"
    fallback: "file-based"
  
  issue_tracking:
    condition: "[MCP_ISSUE_ENABLED]"
    provider: "[MCP_ISSUE_PROVIDER]"
    operations:
      - action: create_issue
        type: "[ISSUE_TYPE]"
        title: "[ISSUE_TITLE]"
        description: "[ISSUE_DESCRIPTION]"
    fallback: "file-based"
  
  documentation:
    condition: "[MCP_DOCS_ENABLED]"
    provider: "[MCP_DOCS_PROVIDER]"
    operations:
      - action: generate_docs
        path: "[DOC_PATH]"
        content: "[DOC_CONTENT]"
    fallback: "file-based"

# MCP Placeholder Resolution Notes
# During AgentTask generation, resolve these placeholders:
# [MCP_MEMORY_ENABLED] → Check mcp_integrations.memory.enabled
# [MCP_MEMORY_PROVIDER] → Get mcp_integrations.memory.provider
# [MCP_ISSUE_ENABLED] → Check mcp_integrations.issue_tracking.enabled
# [MCP_ISSUE_PROVIDER] → Get mcp_integrations.issue_tracking.provider
# [MCP_DOCS_ENABLED] → Check mcp_integrations.documentation.enabled
# [MCP_DOCS_PROVIDER] → Get mcp_integrations.documentation.provider
# If not configured, set to false/"file-based"

# EXECUTION CHECKLIST
execution_checklist: |
  ☐ Step 1 - Knowledge: Memory searched and patterns identified
  ☐ Step 2 - Implementation: Changes made and validated
  ☐ Step 3 - Review: Self-review checklist completed
  ☐ Step 4 - Version: Version bumped appropriately
  ☐ Step 5 - Documentation: CHANGELOG updated (minimum) + affected docs
  ☐ Step 6 - Git Commit: Changes committed with privacy filter
  ☐ Step 7 - Git Push: Changes pushed to remote