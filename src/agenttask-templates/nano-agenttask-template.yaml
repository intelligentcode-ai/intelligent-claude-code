# Nano AgentTask Template - Trivial Changes (0-2 points)
# For simple one-line fixes, typos, and minimal adjustments

# === TEMPLATE METADATA (@PM COORDINATES, SYSTEM FILLS) ===
git_privacy: [GIT_PRIVACY_SETTING]
id: "[PARENT_ID]-AGENTTASK-[NEXT_NUMBER]-[TITLE]-[CURRENT_DATE]"
title: "[ROLE] [DESCRIPTION]"
type: nano-agenttask
complexity: trivial
priority: normal

# MANDATORY: Complete Context Section
complete_context:
  project_root: "[PROJECT_ROOT]"
  system_nature: "[SYSTEM_NATURE]"
  project_overview: "[PROJECT_OVERVIEW]"
  work_location: "[WORK_LOCATION]"
  key_context: "[KEY_CONTEXT]"
  system_features: "[SYSTEM_FEATURES]"
  configuration:
    git_privacy: "[FROM_CONFIG]"
    branch_protection: "[FROM_CONFIG]"
    default_branch: "[FROM_CONFIG]"
    branch_strategy: "[FROM_CONFIG]"
  critical_files:
    - path: "[TARGET_FILE]"
      purpose: "[FILE_PURPOSE]"
      sample: "[FILE_SAMPLE]"
  user_requirements:
    original_request: "[USER_REQUEST]"
    success_criteria: "[SUCCESS_CRITERIA]"
  
  specialization_context:
    technology_domains: "[TECHNOLOGY_DOMAINS]"
    specialist_creation: "ALWAYS create specialists when technology expertise is needed"
    unlimited_domains: "Support ANY technology domain through dynamic specialist creation"
    role_assignment: "PM + Specialist Architect determine when specialists should be created"

# === WORK SPECIFICATION (@PM COORDINATES, ASSIGNED ROLE ANALYZES) ===
user_request: "[USER_REQUEST]"
success_criteria: "[SUCCESS_CRITERIA]"
target_file: "[TARGET_FILE]"
change_needed: "[WHAT_TO_CHANGE]"

# === EXECUTION PATTERN (KEEP AS-IS) ===
execution_notes: |
  CRITICAL: MANDATORY git_privacy validation BEFORE ALL git operations:
  1. Load git_privacy setting from configuration (NEVER assume)
  2. When git_privacy=true, strip ALL AI mentions from:
     - Commit messages (remove "AI", "Claude", "agent", "Generated with Claude Code", etc.)
     - PR descriptions and titles
     - Release notes and changelogs
     - Any git-visible text including co-author attributions
  3. Use clean, professional language in all git operations
  4. Block git operations if privacy setting not validated

execution_steps:
  - "Check memory/[TOPIC]/ for similar patterns"
  - "Make the specified change to target file"
  - "Validate change works as expected"
  - "Commit with format: [ID]: [DESCRIPTION]"
  - "Push to default branch"

validation_checklist:
  - "Change implemented correctly"
  - "No unintended side effects"
  - "Git privacy settings applied"
  - "Change pushed to remote"

# MANDATORY: Validation Enforcement Section
<validation_enforcement id="NANO-AGENTTASK-VALIDATION">
  <memory_requirements mandatory="true">
    <pre_execution>
      <requirement>Memory search completed for [work_type] and [technology_domain] topics</requirement>
      <requirement>Relevant patterns identified and embedded in context</requirement>
      <requirement>Best practices reviewed for applicable guidance</requirement>
    </pre_execution>
    <blocked_patterns>
      <pattern>No memory search needed</pattern>
      <pattern>Skip memory check</pattern>
      <pattern>Too simple for memory</pattern>
      <pattern>No patterns available</pattern>
    </blocked_patterns>
    <error_message>❌ BLOCKED: Memory search is mandatory before execution - search memory/[topic]/ for patterns</error_message>

    <post_execution>
      <requirement>Execution analyzed for lessons learned</requirement>
      <requirement>Relevance filters applied before storage decision</requirement>
      <requirement>Storage ONLY if clear future value demonstrated</requirement>
      <requirement>Security validation: no credentials or sensitive data</requirement>
    </post_execution>
    <post_blocked_patterns>
      <pattern>Store to satisfy requirement</pattern>
      <pattern>No learnings to capture</pattern>
      <pattern>Skip memory storage</pattern>
      <pattern>Nothing worth storing</pattern>
    </post_blocked_patterns>
    <post_error_message>❌ BLOCKED: Automatic analysis mandatory - evaluate execution for reusable patterns</post_error_message>
  </memory_requirements>

  <mandatory_requirements>
    <git_operations mandatory="true">
      <requirement>Git branch creation (if required by branch_protection)</requirement>
      <requirement>Git commit with proper message format</requirement>
      <requirement>Git push to remote repository</requirement>
      <blocked_patterns>
        <pattern>No git operations needed</pattern>
        <pattern>Skip git workflow</pattern>
        <pattern>Direct push to main</pattern>
        <pattern>No commit required</pattern>
      </blocked_patterns>
      <error_message>❌ BLOCKED: Git operations are mandatory for all AgentTasks. No bypass patterns allowed.</error_message>
    </git_operations>

    <sme_review mandatory="true">
      <requirement>Self-review checklist completion</requirement>
      <requirement>Code quality validation</requirement>
      <requirement>Requirements verification</requirement>
      <blocked_patterns>
        <pattern>No review needed</pattern>
        <pattern>Skip validation</pattern>
        <pattern>Self-evident changes</pattern>
        <pattern>Too simple for review</pattern>
      </blocked_patterns>
      <error_message>❌ BLOCKED: SME review processes are mandatory. All changes require validation.</error_message>
    </sme_review>

    <documentation mandatory="true">
      <requirement>Inline comments for complex logic</requirement>
      <requirement>Update relevant documentation</requirement>
      <requirement>Maintain code clarity</requirement>
      <blocked_patterns>
        <pattern>No documentation needed</pattern>
        <pattern>Self-documenting code</pattern>
        <pattern>Skip comments</pattern>
        <pattern>Obvious implementation</pattern>
      </blocked_patterns>
      <error_message>❌ BLOCKED: Documentation updates are mandatory for all changes.</error_message>
    </documentation>
  </mandatory_requirements>

  <workflow>
    <version_bump>[WORKFLOW_VERSION_BUMP]</version_bump>
    <version_type>[WORKFLOW_VERSION_TYPE]</version_type>
    <changelog_required>[WORKFLOW_CHANGELOG_REQUIRED]</changelog_required>
    <pr_required>[WORKFLOW_PR_REQUIRED]</pr_required>
    <merge_strategy>[WORKFLOW_MERGE_STRATEGY]</merge_strategy>
    <release_automation>[WORKFLOW_RELEASE_AUTOMATION]</release_automation>
    <auto_merge>[WORKFLOW_AUTO_MERGE]</auto_merge>
    <coordination_required>[WORKFLOW_COORDINATION_REQUIRED]</coordination_required>
    <breaking_change_assessment>[WORKFLOW_BREAKING_CHANGE_ASSESSMENT]</breaking_change_assessment>
  </workflow>

  <enforcement_rules>
    <rule>ALL validation steps must be explicitly completed</rule>
    <rule>NO bypass language or patterns allowed in execution</rule>
    <rule>MANDATORY git workflow compliance per configuration</rule>
    <rule>REQUIRED self-review completion before marking complete</rule>
  </enforcement_rules>
</validation_enforcement>

# MCP Operations Extension Points
mcp_operations:
  memory:
    condition: "[MCP_MEMORY_ENABLED]"
    provider: "[MCP_MEMORY_PROVIDER]"
    operations:
      - action: store_learning
        topic: "[LEARNING_TOPIC]"
        content: "[LEARNING_CONTENT]"
    fallback: "file-based"
  
  issue_tracking:
    condition: "[MCP_ISSUE_ENABLED]"
    provider: "[MCP_ISSUE_PROVIDER]"
    operations:
      - action: create_issue
        type: "[ISSUE_TYPE]"
        title: "[ISSUE_TITLE]"
        description: "[ISSUE_DESCRIPTION]"
    fallback: "file-based"
  
  documentation:
    condition: "[MCP_DOCS_ENABLED]"
    provider: "[MCP_DOCS_PROVIDER]"
    operations:
      - action: generate_docs
        path: "[DOC_PATH]"
        content: "[DOC_CONTENT]"
    fallback: "file-based"

# MCP Placeholder Resolution Notes
# During AgentTask generation, resolve these placeholders:
# [MCP_MEMORY_ENABLED] → Check mcp_integrations.memory.enabled
# [MCP_MEMORY_PROVIDER] → Get mcp_integrations.memory.provider
# [MCP_ISSUE_ENABLED] → Check mcp_integrations.issue_tracking.enabled
# [MCP_ISSUE_PROVIDER] → Get mcp_integrations.issue_tracking.provider
# [MCP_DOCS_ENABLED] → Check mcp_integrations.documentation.enabled
# [MCP_DOCS_PROVIDER] → Get mcp_integrations.documentation.provider
# If not configured, set to false/"file-based"