# Mega AgentTask Template - System-Wide Changes (30+ points)
# For major system overhauls and architectural changes

git_privacy: [GIT_PRIVACY_SETTING]
id: "[PARENT_ID]-AGENTTASK-[NEXT_NUMBER]-[TITLE]-[CURRENT_DATE]"
type: mega-agenttask
complexity: system-wide
priority: "[PRIORITY_LEVEL]"
title: "[ROLE] [DESCRIPTION]"
requires_epic_decomposition: true

# MANDATORY: Complete Context Section
complete_context:
  project_root: "[PROJECT_ROOT]"
  system_nature: "[SYSTEM_NATURE]"
  project_overview: "[PROJECT_OVERVIEW]"
  work_location: "[WORK_LOCATION]"
  key_context: "[KEY_CONTEXT]"
  system_features: "[SYSTEM_FEATURES]"
  configuration:
    git_privacy: "[FROM_CONFIG]"
    branch_protection: "[FROM_CONFIG]"
    default_branch: "[FROM_CONFIG]"
    branch_strategy: "[FROM_CONFIG]"
  business_driver: "[BUSINESS_JUSTIFICATION]"
  impact_scope: "[ENTIRE_SYSTEM_AFFECTED]"
  risk_level: "[HIGH|CRITICAL]"
  rollback_required: true
  coordination_complexity: "[SYSTEM_WIDE_COORDINATION_REQUIREMENTS]"
  architectural_impact: "[ARCHITECTURAL_SYSTEM_CHANGES]"
  critical_files:
    - path: "[SYSTEM_CORE_1]"
      purpose: "[CORE_PURPOSE_1]"
      sample: "[CORE_SAMPLE_1]"
    - path: "[SYSTEM_CORE_2]"
      purpose: "[CORE_PURPOSE_2]"
      sample: "[CORE_SAMPLE_2]"
  user_requirements:
    original_request: "[USER_REQUEST]"
    success_criteria: "[SUCCESS_CRITERIA]"
    system_scope: "[COMPLETE_SYSTEM_BOUNDARY]"
  
  specialization_context:
    technology_domains: "[TECHNOLOGY_DOMAINS]"
    specialist_creation: "ALWAYS create specialists when technology expertise is needed"
    unlimited_domains: "Support ANY technology domain through dynamic specialist creation"
    role_assignment: "PM + Specialist Architect determine when specialists should be created"
    system_specialists: "Create system-wide specialists for architectural changes"
    coordination_architects: "Create coordination architects for mega-scale implementations"
    domain_examples: "@System-Architect, @Migration-Specialist, @Legacy-Integration-Engineer, @Performance-Architect"

# MANDATORY: Requirements Section
requirements:
  functional:
    - "[SYSTEM_WIDE_REQUIREMENT_1]"
    - "[SYSTEM_WIDE_REQUIREMENT_2]"
    - "[SYSTEM_WIDE_REQUIREMENT_3]"
  processual:
    - "Apply git_privacy across all system changes"
    - "Coordinate system-wide development phases"
    - "Manage complex dependency chains"
    - "Ensure rollback capability at all phases"
  technical:
    - "System-wide architecture changes"
    - "Multi-system integration"
    - "Backward compatibility management"

# Git Privacy Execution Notes
execution_notes: |
  CRITICAL: MANDATORY git_privacy validation BEFORE ALL git operations:
  1. Load git_privacy setting from configuration (NEVER assume)
  2. When git_privacy=true, strip ALL AI mentions from:
     - Commit messages (remove "AI", "Claude", "agent", "Generated with Claude Code", etc.)
     - PR descriptions and titles
     - Release notes and changelogs
     - Any git-visible text including co-author attributions
  3. Use clean, professional language in all git operations
  4. Block git operations if privacy setting not validated

# Epic Decomposition Strategy
epic_decomposition:
  approach: "Break into Large AgentTasks, then Medium/Tiny sub-AgentTasks"
  major_phases:
    - phase: "[PHASE_1]"
      agenttask_type: "large"
      scope: "[PHASE_1_SCOPE]"
      dependencies: []
    - phase: "[PHASE_2]"
      agenttask_type: "large" 
      scope: "[PHASE_2_SCOPE]"
      dependencies: ["[PHASE_1]"]
    - phase: "[INTEGRATION]"
      agenttask_type: "large"
      scope: "[SYSTEM_INTEGRATION]"
      dependencies: ["[PHASE_1]", "[PHASE_2]"]
  <validation_enforcement id="MEGA-EPIC-VALIDATION" mandatory="true">
    <blocking_requirements>
      <requirement>Mega AgentTasks MUST be broken into Large AgentTask phases</requirement>
      <requirement>Each phase must have clear scope and dependencies</requirement>
      <requirement>Integration phase must coordinate all phases</requirement>
      <requirement>Phase naming must follow epic-phase format</requirement>
      <requirement>System-wide changes must follow phased approach</requirement>
    </blocking_requirements>
    <phase_limits>
      <limit>All phases must be Large AgentTasks (16-30 points)</limit>
      <limit>Phases must use large-agenttask-template.yaml</limit>
      <limit>Dependencies must be explicitly documented</limit>
      <limit>Integration phase is mandatory for system coordination</limit>
    </phase_limits>
    <epic_requirements>
      <requirement>Minimum 2 phases required for epic decomposition</requirement>
      <requirement>Maximum 5 phases recommended for manageable coordination</requirement>
      <requirement>Each phase must validate before next phase begins</requirement>
    </epic_requirements>
    <error_message>❌ Mega AgentTasks MUST be decomposed into coordinated phases - direct execution FORBIDDEN</error_message>
  </validation_enforcement>

# Risk Management
risk_management:
  rollback_strategy: "[HOW_TO_ROLLBACK_AT_EACH_PHASE]"
  validation_gates: "[VALIDATION_AT_EACH_PHASE]"
  monitoring_plan: "[HOW_TO_MONITOR_SYSTEM_HEALTH]"

# System Coordination
system_coordination:
  execution_phases: "Sequential with validation gates"
  integration_strategy: "[SYSTEM_WIDE_INTEGRATION_APPROACH]"
  testing_strategy: "[COMPREHENSIVE_SYSTEM_TESTING]"

# MANDATORY: Memory-First Requirements
<memory_requirements mandatory="true">
  <pre_execution>
    <requirement>Memory search completed for [work_type] and [technology_domain] topics</requirement>
    <requirement>System-wide transformation patterns reviewed</requirement>
    <requirement>Architectural change patterns identified</requirement>
    <requirement>Epic-scale coordination patterns discovered</requirement>
    <requirement>Best practices for mega features reviewed</requirement>
    <requirement>Risk mitigation patterns from similar changes applied</requirement>
  </pre_execution>
  <blocked_patterns>
    <pattern>No memory search needed</pattern>
    <pattern>Skip memory check</pattern>
    <pattern>No patterns available</pattern>
    <pattern>Fresh implementation without patterns</pattern>
    <pattern>First system-wide change</pattern>
    <pattern>Unprecedented transformation</pattern>
  </blocked_patterns>
  <error_message>❌ BLOCKED: Memory search is CRITICAL for mega changes - search memory/[topic]/ for patterns</error_message>

  <post_execution>
    <requirement>Execution analyzed for lessons learned</requirement>
    <requirement>System-wide transformation patterns captured</requirement>
    <requirement>Architectural change insights documented</requirement>
    <requirement>Epic coordination patterns identified</requirement>
    <requirement>Risk management lessons captured</requirement>
    <requirement>Relevance filters applied before storage decision</requirement>
    <requirement>Storage ONLY if clear future value demonstrated</requirement>
    <requirement>Security validation: no credentials or sensitive data</requirement>
  </post_execution>
  <post_blocked_patterns>
    <pattern>Store to satisfy requirement</pattern>
    <pattern>No learnings to capture</pattern>
    <pattern>Skip memory storage</pattern>
    <pattern>Nothing worth storing</pattern>
    <pattern>Standard system change</pattern>
  </post_blocked_patterns>
  <post_error_message>❌ BLOCKED: Automatic analysis CRITICAL - mega changes must capture transformation patterns</post_error_message>
</memory_requirements>

# MANDATORY: Knowledge Management
knowledge_management:
  capture_patterns: "Store system-wide change patterns"
  capture_insights: "Document architectural transformation approach"
  location: "memory/[topic]/system-changes.md"

# MANDATORY: Git Operations
git_operations:
  branch_strategy: "Epic branch with phase branches"
  commit_format: "[ID]: [DESCRIPTION]"
  privacy_filter: "[FROM_CONFIG]"
  coordination: "Merge phases to epic branch systematically"
  <validation_enforcement id="MEGA-GIT-VALIDATION" mandatory="true">
    <blocking_requirements>
      <requirement>Epic branch must be created for system-wide coordination</requirement>
      <requirement>Phase branches must be managed systematically</requirement>
      <requirement>Commit format must follow [ID]: [DESCRIPTION] pattern</requirement>
      <requirement>Privacy filter must be applied according to config</requirement>
      <requirement>System-wide changes must follow epic workflow</requirement>
    </blocking_requirements>
    <disallowed_entries>
      <pattern>No git operations needed</pattern>
      <pattern>Skip git workflow</pattern>
      <pattern>Manual system changes only</pattern>
      <pattern>Direct system modifications</pattern>
    </disallowed_entries>
    <error_message>❌ Mega AgentTasks MUST follow epic git workflow - 'No git operations needed' is FORBIDDEN</error_message>
  </validation_enforcement>

# MANDATORY: Review Process
review_process:
  type: "architectural_board_review"
  reviewer: "[SYSTEM_ARCHITECT]"
  focus: "System-wide impact and architectural integrity"
  stakeholders: "[KEY_STAKEHOLDERS]"
  <validation_enforcement id="MEGA-REVIEW-VALIDATION" mandatory="true">
    <blocking_requirements>
      <requirement>Architectural board review must be completed before merge</requirement>
      <requirement>System-wide impact assessment must be documented</requirement>
      <requirement>Key stakeholders must approve system changes</requirement>
      <requirement>Architectural integrity must be validated</requirement>
      <requirement>System architect approval is mandatory</requirement>
    </blocking_requirements>
    <disallowed_entries>
      <pattern>No review needed</pattern>
      <pattern>Review not required</pattern>
      <pattern>Skip architectural board review</pattern>
      <pattern>Internal review only</pattern>
    </disallowed_entries>
    <error_message>❌ Mega AgentTasks MUST have architectural board review - 'No review needed' is FORBIDDEN</error_message>
    <stakeholder_requirements>
      <requirement>System architect approval required</requirement>
      <requirement>Technical lead approval required</requirement>
      <requirement>Security review if applicable</requirement>
      <requirement>Performance impact assessment</requirement>
    </stakeholder_requirements>
  </validation_enforcement>

# MANDATORY: Documentation Updates
documentation_updates:
  changelog: "Document major system changes"
  architecture_docs: "Complete architecture documentation update"
  user_docs: "Comprehensive user documentation overhaul"
  migration_guide: "Provide migration path for users"
  <validation_enforcement id="MEGA-DOCS-VALIDATION" mandatory="true">
    <blocking_requirements>
      <requirement>CHANGELOG must document all major system changes</requirement>
      <requirement>Architecture docs must be completely updated</requirement>
      <requirement>User documentation must be comprehensively overhauled</requirement>
      <requirement>Migration guide must be provided for users</requirement>
      <requirement>System-wide documentation must be synchronized</requirement>
    </blocking_requirements>
    <disallowed_entries>
      <pattern>No documentation needed</pattern>
      <pattern>Documentation not required</pattern>
      <pattern>Skip documentation updates</pattern>
      <pattern>Minimal documentation only</pattern>
    </disallowed_entries>
    <error_message>❌ Mega AgentTasks MUST have comprehensive documentation - 'No documentation needed' is FORBIDDEN</error_message>
    <documentation_scope>
      <item>System architecture overhaul documentation</item>
      <item>User impact and migration documentation</item>
      <item>Developer onboarding updates</item>
      <item>API and integration documentation updates</item>
    </documentation_scope>
  </validation_enforcement>

# MANDATORY: Workflow Configuration
workflow:
  version_bump: "[WORKFLOW_VERSION_BUMP]"
  version_type: "[WORKFLOW_VERSION_TYPE]"
  changelog_required: "[WORKFLOW_CHANGELOG_REQUIRED]"
  pr_required: "[WORKFLOW_PR_REQUIRED]"
  merge_strategy: "[WORKFLOW_MERGE_STRATEGY]"
  release_automation: "[WORKFLOW_RELEASE_AUTOMATION]"
  auto_merge: "[WORKFLOW_AUTO_MERGE]"
  coordination_required: "[WORKFLOW_COORDINATION_REQUIRED]"
  breaking_change_assessment: "[WORKFLOW_BREAKING_CHANGE_ASSESSMENT]"

# MCP Operations Extension Points
mcp_operations:
  memory:
    condition: "[MCP_MEMORY_ENABLED]"
    provider: "[MCP_MEMORY_PROVIDER]"
    operations:
      - action: store_learning
        topic: "[LEARNING_TOPIC]"
        content: "[LEARNING_CONTENT]"
    fallback: "file-based"
  
  issue_tracking:
    condition: "[MCP_ISSUE_ENABLED]"
    provider: "[MCP_ISSUE_PROVIDER]"
    operations:
      - action: create_issue
        type: "[ISSUE_TYPE]"
        title: "[ISSUE_TITLE]"
        description: "[ISSUE_DESCRIPTION]"
    fallback: "file-based"
  
  documentation:
    condition: "[MCP_DOCS_ENABLED]"
    provider: "[MCP_DOCS_PROVIDER]"
    operations:
      - action: generate_docs
        path: "[DOC_PATH]"
        content: "[DOC_CONTENT]"
    fallback: "file-based"

# MCP Placeholder Resolution Notes
# During AgentTask generation, resolve these placeholders:
# [MCP_MEMORY_ENABLED] → Check mcp_integrations.memory.enabled
# [MCP_MEMORY_PROVIDER] → Get mcp_integrations.memory.provider
# [MCP_ISSUE_ENABLED] → Check mcp_integrations.issue_tracking.enabled
# [MCP_ISSUE_PROVIDER] → Get mcp_integrations.issue_tracking.provider
# [MCP_DOCS_ENABLED] → Check mcp_integrations.documentation.enabled
# [MCP_DOCS_PROVIDER] → Get mcp_integrations.documentation.provider
# If not configured, set to false/"file-based"

# Execution Strategy
execution_strategy: |
  1. Create epic branch for system-wide coordination
  2. Execute Phase 1 Large AgentTasks with validation gates
  3. Execute Phase 2 Large AgentTasks building on Phase 1
  4. Execute Integration Large AgentTasks for system unification
  5. Comprehensive system testing and validation
  6. Documentation overhaul and migration guide creation
  7. Staged rollout with rollback capability
  
# EXECUTION CHECKLIST
execution_checklist: |
  ☐ Epic branch created for system coordination (MANDATORY - validation enforced)
  ☐ Epic decomposition completed into phases (MANDATORY - no direct execution)
  ☐ Phase 1 Large AgentTasks executed with validation (MANDATORY - phased approach)
  ☐ Phase 2 Large AgentTasks executed building on Phase 1 (MANDATORY - dependency validation)
  ☐ Integration Large AgentTasks executed for system unification (MANDATORY - coordination)
  ☐ Comprehensive system testing completed (MANDATORY - system validation)
  ☐ Documentation completely updated with migration guide (MANDATORY - no "No documentation needed")
  ☐ Architectural board review completed (MANDATORY - no "Review not required")
  ☐ Git operations followed epic workflow (MANDATORY - no "No git operations needed")
  ☐ All stakeholder approvals obtained (MANDATORY - validation enforced)
  ☐ All validation enforcement rules verified
  ☐ Staged rollout plan executed with rollback capability