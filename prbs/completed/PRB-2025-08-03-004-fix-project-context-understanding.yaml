# Product Requirement Blueprint (PRB)

## Metadata
title: "[AI-Engineer] Fix system not understanding project context and scope"
prb_id: "PRB-2025-08-03-004"
complexity: "Large"
score: 18
created_by: "@PM"
created_at: "2025-08-03"
tags: ["context-understanding", "project-scope", "role-selection", "critical-fix"]

# MANDATORY: Complete Context Section
complete_context:
  system_nature: "MARKDOWN-BASED AI-AGENTIC SYSTEM (NO CODE)"
  implementation: "BEHAVIORAL PATTERNS IN MARKDOWN ONLY"
  project: "intelligent-claude-code - AI-agentic markdown virtual team system"
  type: "BUG_FIX"
  priority: "HIGH"
  requester: "User - System fails to understand project context"
  
  # Actual configuration values (not placeholders)
  configuration:
    git_privacy: true
    branch_protection: true
    default_branch: "main"
    autonomy_level: "L3"
    pm_always_active: true
    memory_integration: true
    blocking_enabled: true
    auto_correction: true
    
  # Critical file references with samples
  critical_files:
    - path: "/Users/ksamaschke/Work/Engineering/intelligent-claude-code/CLAUDE.md"
      purpose: "Project context and instructions for this AI-agentic system"
      sample: "Virtual team system with 14 specialized roles, PRB-driven execution"
    - path: "/Users/ksamaschke/Work/Engineering/intelligent-claude-code/src/behaviors/prb-creation-mandates.md"
      purpose: "PRB creation patterns needing context-first approach"
      sample: "Role-in-title + complexity-based templates"
    - path: "/Users/ksamaschke/Work/Engineering/intelligent-claude-code/src/roles/specialists.md"
      purpose: "Role definitions needing 70% threshold removal"
      sample: "14 core roles, dynamic specialist creation, ultra-experienced"
    - path: "/Users/ksamaschke/Work/Engineering/intelligent-claude-code/src/behaviors/config-loader.md"
      purpose: "Config loading needing project context priority"
      sample: "Configuration hierarchy, CLAUDE.md loading, project context"

## Problem Statement
The system fundamentally misunderstands project context, leading to cascading failures:
1. **This Project**: Creating AI-agentic behavioral patterns/commands (NOT implementing them)
2. **Other Projects**: Could be ANYTHING - the system must adapt
3. **Role Selection**: Must match PROJECT context, not system context
4. **Specialist Creation**: Should ALWAYS create ultra-experienced specialists

### Current Issues:
- System thinks it's implementing features instead of creating patterns
- Selects roles based on intelligent-claude-code context in OTHER projects
- Only creates specialists at <70% match instead of always
- Doesn't read project context to understand what's being built

### Required Behavior:
- **Context First**: ALWAYS understand what project is being worked on
- **This Project**: AI-agentic markdown patterns → AI roles only
- **Other Projects**: Match roles to THEIR context (e.g., React project → @React-Developer)
- **Always Specialists**: Create ultra-experienced specialists for EVERY task

# MANDATORY: Requirements Section
requirements:
  functional:
    - "System must read and understand PROJECT context first before any work"
    - "Role selection based on CURRENT project context, not system internals"
    - "ALWAYS create ultra-experienced dynamic specialists for any domain"
    - "Remove 70% threshold - create specialists for everything"
    - "Distinguish pattern creation (this project) from implementation (other projects)"
    - "Load CLAUDE.md to understand what project is being worked on"
  
  processual:
    - "Respect git_privacy=true for commit messages (strip AI mentions)"
    - "Follow branch_protection=true strategy from config"
    - "Use default_branch=main for all git operations"
    - "Apply autonomy_level=L3 for autonomous context detection"
    - "100% context-appropriate role selection before any task"
    - "All specialists have 10+ years experience minimum"
    - "Clear project understanding before role assignment"
  
  technical:
    - "MARKDOWN-BASED system only - no code/functions/classes"
    - "Project context detection from CLAUDE.md and file structure"
    - "Dynamic specialist creation without capability thresholds"
    - "Context separation logic for different project types"

## Implementation Details

### Affected Files
- `.claude/behaviors/prb-creation-mandates.md` - Context-first approach
- `.claude/roles/specialists.md` - Remove 70% threshold
- `.claude/behaviors/prb-auto-trigger.md` - Project detection logic
- `.claude/behaviors/config-loader.md` - Load project context

### Key Changes Needed
1. **Project Context Detection**:
   ```markdown
   MANDATORY: Before ANY work:
   1. Check CLAUDE.md for project description
   2. Understand what's being BUILT
   3. Select roles for THAT context
   
   Examples:
   - intelligent-claude-code → AI-Engineer (patterns)
   - React app → @React-Developer (implementation)
   - API service → @Backend-Developer (implementation)
   ```

2. **Specialist Creation**:
   ```markdown
   OLD: <70% match → Create specialist
   NEW: ALWAYS create ultra-experienced specialist
   
   Examples:
   - React work → @React-Specialist (10+ years)
   - AWS work → @AWS-Architect (10+ years)
   - Blockchain → @Blockchain-Expert (10+ years)
   ```

3. **Context Separation**:
   ```markdown
   This Project (intelligent-claude-code):
   - Creating patterns/behaviors → @AI-Engineer
   - No implementation roles
   
   Other Projects:
   - Read their context
   - Match their needs
   - Create appropriate specialists
   ```

## Success Criteria
1. System understands project context before role selection
2. Roles match current project, not system project
3. Ultra-experienced specialists created for all work
4. No 70% threshold - specialists for everything

## Role Assignments
- **Lead**: @AI-Engineer (behavioral pattern expertise)
- **Reviewer**: @AI-System-Architect (system design validation)

## Validation Steps
1. Test role selection in different project contexts
2. Verify specialists created for all tasks
3. Confirm project understanding comes first
4. Check 10+ years experience on all specialists

## Risk Assessment
- **Critical Risk**: Continued context confusion
- **Mitigation**: Explicit context detection patterns
- **Medium Risk**: Over-creating specialists
- **Mitigation**: Specialist reuse patterns

# MANDATORY: Git Operations Section
git_operations:
  branch_strategy: "feature/[prb-id]-[description]"
  branch_protection: true
  branch_name: "feature/PRB-004-fix-project-context-understanding"
  commit_format: "[PRB-004]: [description]"
  privacy_filter: true  # Strip AI mentions from commits
  default_branch: "main"
  version_bump: "minor"  # Context understanding is significant change
  merge_strategy: "squash"
  
# MANDATORY: Knowledge Management Section
knowledge_management:
  structure: "memory/[topic]/[subtopic].md"
  storage: "version-controlled in project repository"
  embedded_learnings: "pre-searched and embedded in PRB context"
  pre_execution:
    - "Search memory/ for project context detection patterns"
    - "Embed role selection improvement learnings"
    - "Include specialist creation best practices"
  post_execution:
    - "Store project context understanding patterns"
    - "Capture context-first role selection techniques"
    - "Document specialist creation without thresholds"
  capture_location: "memory/project/context-understanding.md"
  
# MANDATORY: Review Process Section
review_process:
  type: "sme_review"
  reviewer: "@AI-System-Architect"
  secondary_reviewer: "@AI-Engineer"
  focus_areas:
    - "System understands project context before role selection"
    - "Roles match current project, not system project context"
    - "Ultra-experienced specialists created for all work"
    - "No 70% threshold - specialists for everything"
    - "Context separation between pattern creation and implementation"
  max_cycles: 3
  context_tests:
    - "intelligent-claude-code project → @AI-Engineer for patterns"
    - "React project → @React-Developer for implementation"
    - "API service → @Backend-Developer for implementation"
    - "Any domain → Ultra-experienced specialist created"
  checklist:
    - "Project context detection implemented in prb-creation-mandates.md"
    - "70% threshold removed from specialists.md"
    - "Context-first approach in prb-auto-trigger.md"
    - "CLAUDE.md loading prioritized in config-loader.md"
    
# MANDATORY: Implementation Samples Section
implementation_samples:
  example_commit: "[PRB-004]: Implement context-first role selection and remove specialist thresholds"
  example_branch: "feature/PRB-004-fix-project-context-understanding"
  example_scope: |
    Files: src/behaviors/prb-creation-mandates.md, src/roles/specialists.md, src/behaviors/prb-auto-trigger.md, src/behaviors/config-loader.md
    - Add context detection before role selection
    - Remove 70% threshold for specialist creation
    - Implement project-appropriate role mapping
    - Prioritize CLAUDE.md loading for context
  
  context_detection_logic: |
    MANDATORY: Before ANY work:
    1. Read CLAUDE.md for project description
    2. Understand what's being BUILT in this project
    3. Select roles appropriate for THAT context
    
    Examples:
    - intelligent-claude-code → @AI-Engineer (creating patterns)
    - React app → @React-Developer (implementing features)
    - API service → @Backend-Developer (building endpoints)
    - Blockchain → @Blockchain-Expert (smart contracts)
    - ML project → @ML-Engineer (model development)
  
  specialist_creation_new: |
    OLD Logic: <70% match → Create specialist
    NEW Logic: ALWAYS create ultra-experienced specialist
    
    Examples:
    - React work → @React-Specialist (10+ years React expertise)
    - AWS work → @AWS-Solutions-Architect (10+ years cloud architecture)
    - Database → @Database-Architect (10+ years DB design)
    - Security → @Security-Expert (10+ years cybersecurity)
    
  context_separation: |
    This Project (intelligent-claude-code):
    - Creating behavioral patterns → @AI-Engineer
    - Designing system architecture → @AI-Architect
    - No implementation roles (we create patterns, not implementations)
    
    Other Projects:
    - Read their CLAUDE.md for context
    - Match roles to their actual needs
    - Create appropriate domain specialists

## Notes
CRITICAL: The system must understand WHAT project it's working on BEFORE selecting roles. This project creates patterns; other projects implement features. ALWAYS create ultra-experienced specialists.